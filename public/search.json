[{"title":"chrome插件开发基础","url":"/chrome_extension/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>chrome插件可以扩展浏览器的功能，为用户提供更便捷的操作或增强网页的交互体验。</p>\n<h2 id=\"主要文件内容\"><a href=\"#主要文件内容\" class=\"headerlink\" title=\"主要文件内容\"></a>主要文件内容</h2><ul>\n<li>Manifest （清单文件）主要的插件配置清单，包含插件的名称、版本号、图标、脚本文件名称等<ul>\n<li>⭐️ permissions 权限</li>\n</ul>\n</li>\n<li>Content Script （内容脚本）<ul>\n<li>injected script，是插件<strong>注入到页面的脚</strong>本，但是不<strong>会体现在页面 DOM</strong> 结构里。</li>\n<li>content script <strong>可以操作 DOM</strong>，但是它和页面其他的脚本是隔离的，<strong>访问不到其他脚本</strong>定义的变量、函数等，相当于运行在<strong>单独的沙盒</strong>里。</li>\n<li>content script 可以<strong>调用有限的 chrome 插件 API</strong>，网络请求收到同源策略限制。</li>\n<li>调试可以在 chrome devtool 里的source 里面的 content script</li>\n</ul>\n</li>\n<li>Background Script （后台脚本）<ul>\n<li>可以调用<strong>全部的 chrome 插件 API</strong>，实现跨域请求、网页截屏、弹出 chrome 通知消息等功能。</li>\n<li>相当于在一个隐藏的浏览器页面内默默运行。(类似<strong>独立的一个线程</strong>)</li>\n</ul>\n</li>\n<li>功能页面(相当于多页应用)<ul>\n<li>包括点击插件图标弹出的页面(简称 popup)popup.html popup.js...</li>\n<li>插件的配置页面(简称 options)</li>\n<li>浏览器新增tab默认页 (newtab)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"各部分权限\"><a href=\"#各部分权限\" class=\"headerlink\" title=\"各部分权限\"></a>各部分权限</h2><p><img src=\"/./chrome_extension/1.png\" alt=\"1\" loading=\"lazy\"></p>\n<blockquote>\n<p>ps: injected script 可以理解为 源web页脚本</p>\n</blockquote>\n<h2 id=\"通信方式\"><a href=\"#通信方式\" class=\"headerlink\" title=\"通信方式\"></a>通信方式</h2><p><img src=\"/./chrome_extension/2.png\" alt=\"2\" loading=\"lazy\"></p>\n<blockquote>\n<p>ps: injected script 可以理解为 源web页脚本</p>\n</blockquote>\n<h3 id=\"content-script-popup与background\"><a href=\"#content-script-popup与background\" class=\"headerlink\" title=\"content-script&#x2F;popup与background\"></a>content-script&#x2F;popup与background</h3><ol>\n<li><code>chrome.runtime.sendMessage</code> 和 <code>chrome.runtime.onMessage.addListener</code> 适用于<strong>一次性发送和接收消息</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送方 (内容脚本或弹窗)</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"title function_\">sendMessage</span>(&#123; <span class=\"attr\">greeting</span>: <span class=\"string\">&quot;hello&quot;</span> &#125;, <span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Response:&quot;</span>, response);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收方 (后台脚本)</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onMessage</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">message, sender, sendResponse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Received message:&quot;</span>, message);</span><br><span class=\"line\">  <span class=\"title function_\">sendResponse</span>(&#123; <span class=\"attr\">farewell</span>: <span class=\"string\">&quot;goodbye&quot;</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// Return true to keep the message channel open for async response.</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>chrome.tabs.sendMessage(tabId, message, options)</code> 允许向特定标签的内容脚本(content-script)发送消息<br>使用前需调用<code>chrome.tabs.query</code>获取 tabId 以指定那个特定的tab标签也发送消息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">chrome.<span class=\"property\">tabs</span>.<span class=\"title function_\">query</span>(&#123;<span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span>&#125;, <span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 发送到当前激活的标签页面</span></span><br><span class=\"line\">  chrome.<span class=\"property\">tabs</span>.<span class=\"title function_\">sendMessage</span>(tabs[<span class=\"number\">0</span>].<span class=\"property\">id</span>, &#123;<span class=\"attr\">greeting</span>: <span class=\"string\">&quot;hello&quot;</span>&#125;, <span class=\"keyword\">function</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">farewell</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>chrome.runtime.connect</code> 和 <code>chrome.runtime.onConnect</code> 持久的双向通信通道，适用于需要持续交互的场景。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送方 (内容脚本)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = chrome.<span class=\"property\">runtime</span>.<span class=\"title function_\">connect</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;content-channel&quot;</span> &#125;);</span><br><span class=\"line\">port.<span class=\"title function_\">postMessage</span>(&#123; <span class=\"attr\">greeting</span>: <span class=\"string\">&quot;hello&quot;</span> &#125;);</span><br><span class=\"line\">port.<span class=\"property\">onMessage</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Response:&quot;</span>, response);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收方 (后台脚本)</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onConnect</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">port</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Connected:&quot;</span>, port.<span class=\"property\">name</span>);</span><br><span class=\"line\">  port.<span class=\"property\">onMessage</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">message</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Message received:&quot;</span>, message);</span><br><span class=\"line\">    port.<span class=\"title function_\">postMessage</span>(&#123; <span class=\"attr\">response</span>: <span class=\"string\">&quot;hi from background&quot;</span> &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>chrome.tabs.connect(tabId)</code>指定标签中的内容脚本(content-script)之间的连接<br>使用前需调用<code>chrome.tabs.query</code>获取 tabId 以指定那个特定的tab标签也发送消息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">browser.<span class=\"property\">tabs</span>.<span class=\"title function_\">connect</span>(</span><br><span class=\"line\">  tabId,      <span class=\"comment\">// 整数</span></span><br><span class=\"line\">  connectInfo <span class=\"comment\">// 可选的对象</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"content-script-与-web页\"><a href=\"#content-script-与-web页\" class=\"headerlink\" title=\"content-script 与 web页\"></a>content-script 与 web页</h3><ol>\n<li><code>window.postMessage</code> 和 <code>window.addEventListener(&quot;message&quot;, ...)</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 网页脚本</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">source</span> !== <span class=\"variable language_\">window</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">data</span>.<span class=\"property\">type</span> === <span class=\"string\">&quot;FROM_EXTENSION&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Message from extension:&quot;</span>, event.<span class=\"property\">data</span>.<span class=\"property\">payload</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">postMessage</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;TO_EXTENSION&quot;</span>, <span class=\"attr\">payload</span>: <span class=\"string\">&quot;Hello from page&quot;</span> &#125;, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内容脚本</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">postMessage</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;FROM_EXTENSION&quot;</span>, <span class=\"attr\">payload</span>: <span class=\"string\">&quot;Hello from extension&quot;</span> &#125;, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">source</span> !== <span class=\"variable language_\">window</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">data</span>.<span class=\"property\">type</span> === <span class=\"string\">&quot;TO_EXTENSION&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Message from page:&quot;</span>, event.<span class=\"property\">data</span>.<span class=\"property\">payload</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"跨插件通信\"><a href=\"#跨插件通信\" class=\"headerlink\" title=\"跨插件通信\"></a>跨插件通信</h3><p>除了本身chrome extension 还可以与其他extension通信</p>\n<blockquote>\n<p><strong>发送请求信息时，必须提供chrome插件的 ID</strong></p>\n</blockquote>\n<ol>\n<li>一次性通信 <code>chrome.runtime.sendMessage(id, message)</code> 和<code>chrome.runtime.onMessageExternal()</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要通信的extension id</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> laserExtensionId = <span class=\"string\">&quot;abcdefghijklmnoabcdefhijklmnoabc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"title function_\">sendMessage</span>(laserExtensionId, &#123;<span class=\"attr\">getTargetData</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">targetInRange</span>(response.<span class=\"property\">targetData</span>))</span><br><span class=\"line\">      chrome.<span class=\"property\">runtime</span>.<span class=\"title function_\">sendMessage</span>(laserExtensionId, &#123;<span class=\"attr\">activateLasers</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onMessageExternal</span>.<span class=\"title function_\">addListener</span>(</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">request, sender, sendResponse</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 黑名单，不允许此扩展程序访问</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sender.<span class=\"property\">id</span> === blocklistedExtension)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.<span class=\"property\">getTargetData</span>)</span><br><span class=\"line\">      <span class=\"title function_\">sendResponse</span>(&#123;<span class=\"attr\">targetData</span>: targetData&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.<span class=\"property\">activateLasers</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> success = <span class=\"title function_\">activateLasers</span>();</span><br><span class=\"line\">      <span class=\"title function_\">sendResponse</span>(&#123;<span class=\"attr\">activateLasers</span>: success&#125;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>长链接通信<code>chrome.runtime.connect(id)</code> 和 <code>chrome.runtime.onConnectExternal.addListener</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要通信的extension id</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> laserExtensionId = <span class=\"string\">&quot;abcdefghijklmnoabcdefhijklmnoabc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> port = chrome.<span class=\"property\">runtime</span>.<span class=\"title function_\">connect</span>(laserExtensionId);</span><br><span class=\"line\">port.<span class=\"title function_\">postMessage</span>(...);</span><br><span class=\"line\"></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onConnectExternal</span>.<span class=\"title function_\">addListener</span>(<span class=\"keyword\">function</span>(<span class=\"params\">port</span>) &#123;</span><br><span class=\"line\">  port.<span class=\"property\">onMessage</span>.<span class=\"title function_\">addListener</span>(<span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"web页直接与-background通信\"><a href=\"#web页直接与-background通信\" class=\"headerlink\" title=\"web页直接与 background通信\"></a>web页直接与 background通信</h3><div class=\"markdown-alert markdown-alert-tip\">\n<p class=\"markdown-alert-title\"><svg class=\"octicon octicon-light-bulb mr-2\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z\"></path></svg>Tip</p>\n<p>注意: manifest配置 需 externally_connectable.matches！！这个很重要 只有配置了该值 才能在web页直接访问到 <code>chrome.runtime</code></p>\n</div>\n<p>如果未指定<code>externally_connectable</code>健，则默认所有chrome extension都可以链接，但网页无法直接连接，<br>当指定externally_connectable，如果未指定 <code>externally_connectable.ids: [&quot;*&quot;]</code> 则其他扩展将失去对你的扩展的连接，这可能会导致意想不到的结果 需注意。</p>\n<ul>\n<li><code>externally_connectable.ids</code>指定允许其他扩展连接你的扩展的id</li>\n<li><code>externally_connectable.matches</code>: 指定允许直接连接 你的扩展的的url</li>\n</ul>\n<blockquote>\n<p>扩展即是chrome extension</p>\n</blockquote>\n<p>web页直接与插件通信 需指定插件id 与 跨插件通信差不多</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"title function_\">sendMessage</span>(editorExtensionId, &#123;<span class=\"attr\">openUrlInEditor</span>: url&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!response.<span class=\"property\">success</span>) <span class=\"title function_\">handleError</span>(url);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"storage\"><a href=\"#storage\" class=\"headerlink\" title=\"storage\"></a>storage</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kb2NzL2V4dGVuc2lvbnMvcmVmZXJlbmNlL2FwaS9zdG9yYWdl\">官方文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n<div class=\"markdown-alert markdown-alert-tip\">\n<p class=\"markdown-alert-title\"><svg class=\"octicon octicon-light-bulb mr-2\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z\"></path></svg>Tip</p>\n<p>美观点观察chrome的storage可使用该插件: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHJvbWV3ZWJzdG9yZS5nb29nbGUuY29tL2RldGFpbC9zdG9yYWdlLWFyZWEtZXhwbG9yZXIvb2NmampqamhrcGFwb2NpZ2ltbXBwZXBqZ2ZkZWNqa2I=\">Storage Area Explorer<i class=\"fa fa-external-link-alt\"></i></span></p>\n</div>\n<p>storage存储区:</p>\n<ul>\n<li><code>storage.local</code>: 数据存储在本地，并在删除扩展时清除</li>\n<li><code>storage.sync</code>: 以利用 Chrome 的同步功能，<strong>实现同一账户下的扩展程序数据在多个设备之间同步</strong><ul>\n<li>如果已登录账户的 Chrome 离线时，希望同步存储的数据会先进行本地存储，等待浏览器上线后再进行同步。</li>\n<li>如果用户在 Chrome 设置中取消了数据同步功能，那么 chrome.storage.sync 相关方法的作用和 chrome.storage.local 一样</li>\n</ul>\n</li>\n<li><code>storage.session</code>: 在浏览器会话期间将数据保存在内存中</li>\n<li><code>storage.managed</code>: 只读存储，策略类似于选项，但由系统管理员而不是用户配置，允许为组织的所有用户预先配置扩展</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk4ODY0MTIwNjExMDk0NTY0\">https://juejin.cn/post/6998864120611094564<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzOTg1NzExNjc3NDUz\">https://juejin.cn/post/6844903985711677453<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["技术"],"tags":["chrome-extension"]},{"title":"理解metamask的extension-port-stream包","url":"/parse_extension_port_stream/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL2V4dGVuc2lvbi1wb3J0LXN0cmVhbQ==\">extension-port-stream<i class=\"fa fa-external-link-alt\"></i></span>将<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Nb3ppbGxhL0FkZC1vbnMvV2ViRXh0ZW5zaW9ucy9BUEkvcnVudGltZS9Qb3J0\">浏览器插件上的Runtime.Port对象<i class=\"fa fa-external-link-alt\"></i></span> 转成stream流对象.</p>\n<p>继承于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9yZWFkYWJsZS1zdHJlYW0=\">readable-stream<i class=\"fa fa-external-link-alt\"></i></span><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--error hint--medium hint--rounded hint--bounce\" aria-label=\"readable-stream是Node.js官方出的库,旨在提供Streams模块的兼容性实现。允许开发者在不同的Node.js版本中使用一致的`StreamsAPI`，同时也为浏览器环境提供支持\n\">[1]</span></a></sup>的<code>Duplex</code></p>\n<p>该库比较简单:</p>\n<p>stream实例对象上的<code>_write</code>调用了portInstance.postMessage方法 作为输出<br>监听<code>portInstance.onMessage.addListener</code>(内部调用了<code>stream.push</code>方法)作为输入</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li><code>@metamask/post-message-stream</code>中的runtime是对应浏览器插件中的 <code>chrome.runtime.sendMessage</code>和<code>chrome.runtime.onMessage.addListener</code> 这种适用于<strong>一次性发送和接收消息</strong></li>\n<li><code>extension-port-stream</code>中是对应 <code>portInstance = chrome.runtime.connect</code> 中的 <code>portInstance.postMessage</code> 和 <code>portInstance.onMessage.addListener</code>持久的双向通信通道，适用于需要持续交互的场景</li>\n</ul>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style: none; padding-left: 0; margin-left: 40px\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px\">1.</span><span style=\"display: inline-block; vertical-align: top; margin-left: 10px;\">readable-stream是Node.js官方出的库,旨在提供Streams模块的兼容性实现。允许开发者在不同的Node.js版本中使用一致的<code>StreamsAPI</code>，同时也为浏览器环境提供支持<a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></span></li></ol></div></div>","categories":["技术"],"tags":["web3","chrome-extension","metamask","stream","npm-package"]},{"title":"理解@metamask/object-multiplex包","url":"/parse_object_multiplex/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL29iamVjdC1tdWx0aXBsZXg=\">@metamask&#x2F;object-multiplex<i class=\"fa fa-external-link-alt\"></i></span> 是 MetaMask 提供的一个基于<code>objectMode</code>的流多路复用库.</p>\n<p>用于将<strong>多条流整合到同一个流中处理</strong>，在<strong>同一个流中同时处理多种不同类型的数据通道</strong>（即多路复用）。</p>\n<p><code>ObjectMultiplex</code>继承于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9yZWFkYWJsZS1zdHJlYW0=\">readable-stream<i class=\"fa fa-external-link-alt\"></i></span><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--error hint--medium hint--rounded hint--bounce\" aria-label=\"readable-stream是Node.js官方出的库,旨在提供Streams模块的兼容性实现。允许开发者在不同的Node.js版本中使用一致的`StreamsAPI`，同时也为浏览器环境提供支持\n\">[1]</span></a></sup>的<code>Duplex</code></p>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><p>使用<code>ObjectMultiplex</code> 多个流同时经过一个处理流</p>\n<p>不使用<code>ObjectMultiplex</code>时:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> streamA = <span class=\"keyword\">new</span> <span class=\"title class_\">Duplex</span>(...)</span><br><span class=\"line\"><span class=\"keyword\">const</span> streamB = <span class=\"keyword\">new</span> <span class=\"title class_\">Duplex</span>(...)</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformStream = <span class=\"keyword\">new</span> <span class=\"title class_\">Transform</span>(...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时需分别添加transformStream</span></span><br><span class=\"line\">streamA.<span class=\"title function_\">pipe</span>(transformStream).<span class=\"title function_\">pipe</span>(streamA)</span><br><span class=\"line\">streamB.<span class=\"title function_\">pipe</span>(transformStream).<span class=\"title function_\">pipe</span>(streamB)</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>ObjectMultiplex</code>时, 注意transformStream需开启objectMode(因为ObjectMultiplex使用对象形式传输数据)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Transform</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;readable-stream&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ObjectMultiplex</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@metamask/object-multiplex&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mux = <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMultiplex</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> streamA = mux.<span class=\"title function_\">createStream</span>(<span class=\"string\">&#x27;streamA&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> streamB = mux.<span class=\"title function_\">createStream</span>(<span class=\"string\">&#x27;streamB&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformStream = <span class=\"keyword\">new</span> <span class=\"title class_\">Transform</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// !! 注意必须objectMode: true, object-multiplex内部是使用对象形式传输的</span></span><br><span class=\"line\">  <span class=\"attr\">objectMode</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"title function_\">transform</span>(<span class=\"params\">chunk, encoding, callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;transform: &#x27;</span>, chunk);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">push</span>(chunk);</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时只需直接往mux父流 添加 transformStream</span></span><br><span class=\"line\">mux.<span class=\"title function_\">pipe</span>(transformStream).<span class=\"title function_\">pipe</span>(mux);</span><br><span class=\"line\"></span><br><span class=\"line\">streamA.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;streamA test&#x27;</span>);</span><br><span class=\"line\">streamB.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;streamB test&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时transformStream 接收到数据 为</span></span><br><span class=\"line\"><span class=\"comment\">// transform:  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   name: &quot;streamA&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">//   data: &quot;streamA test&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// transform:  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   name: &quot;streamB&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">//   data: &quot;streamB test&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"头尾同一流的意义\"><a href=\"#头尾同一流的意义\" class=\"headerlink\" title=\"头尾同一流的意义\"></a>头尾同一流的意义</h2><p>metamask出现很多头尾同一流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">mux.<span class=\"title function_\">pipe</span>(streamA).<span class=\"title function_\">pipe</span>(mux)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mux.pipe(streamA): 将 mux 的输出（分发后的数据）发送到 streamA</li>\n<li>streamA.pipe(mux): 将 streamA 的输入（通道的数据）发送回 mux, 让 mux 收集并分发。</li>\n</ul>\n<p>mux 需要从 streamA 中收集数据，同时将数据发送给 streamA。这构成了一个完整的循环</p>\n<p>实现了双向通信: 需要既发送又接收数据，形成完整的通信链路</p>\n<h3 id=\"双向通信\"><a href=\"#双向通信\" class=\"headerlink\" title=\"双向通信\"></a>双向通信</h3><p>streamA流和transformStream流可以相互通信</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Transform</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;readable-stream&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ObjectMultiplex</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@metamask/object-multiplex&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mux = <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMultiplex</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> streamA = mux.<span class=\"title function_\">createStream</span>(<span class=\"string\">&#x27;streamA&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformStream = <span class=\"keyword\">new</span> <span class=\"title class_\">Transform</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// !! 注意必须objectMode: true, object-multiplex内部是使用对象形式传输的</span></span><br><span class=\"line\">  <span class=\"attr\">objectMode</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"title function_\">transform</span>(<span class=\"params\">chunk, encoding, callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;transform: &#x27;</span>, chunk);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">push</span>(chunk);</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时只需直接往mux父流 添加 transformStream</span></span><br><span class=\"line\">mux.<span class=\"title function_\">pipe</span>(transformStream).<span class=\"title function_\">pipe</span>(mux);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>streamA 或mux 写入数据 传给 transform流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mux.pipe(transformStream).pipe(mux)</span></span><br><span class=\"line\">streamA.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;streamA test&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 结果:</span></span><br><span class=\"line\"><span class=\"comment\">// transform:  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   name: &quot;streamA&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">//   data: &quot;streamA test&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>数据流向大概是:</p>\n<ol>\n<li>streamA的<code>_write</code>触发, 内部调用<code>this._parent.push</code>(即是mux的push函数)</li>\n<li>mux的_read触发</li>\n<li>因pipe连接mux的可读流数据 触发transformStream的transform, transform内触发this.push</li>\n<li>因pipe连接transformStream的可读流数据 触发mux的_write</li>\n<li>mux的_write 即而触发 streamA的 _read</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此时需改成以streamA 连接，因为mux.write是往streamA的可读流添加数据</span></span><br><span class=\"line\">streamA.<span class=\"title function_\">pipe</span>(transformStream).<span class=\"title function_\">pipe</span>(streamA);</span><br><span class=\"line\">mux.<span class=\"title function_\">write</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;streamA&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"string\">&#x27;mux stream call streamA&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 结果:</span></span><br><span class=\"line\"><span class=\"comment\">// transform:  mux stream call streamA</span></span><br></pre></td></tr></table></figure>\n\n<p>数据流向大概是:</p>\n<ol>\n<li>mux的<code>_write</code>触发， 内部substreams[&#39;streamA&#39;] 触发streamA的push函数</li>\n<li>streamA的_read触发</li>\n<li>因pipe连接streamA的可读流数据 触发transformStream的transform, transform内触发this.push</li>\n<li>因pipe连接transformStream的可读流数据 触发streamA的_write</li>\n<li>streamA的_write 即而触发streamA的<code>_parent</code>(即是mux)的push函数,  即而触发 mux的 _read</li>\n</ol>\n<p>transform流 写入数据 传给 streamA</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mux.pipe(transformStream).pipe(mux)</span></span><br><span class=\"line\"></span><br><span class=\"line\">transformStream.<span class=\"title function_\">write</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;streamA&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"string\">&#x27;transformStream test&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 注意这里 不能使用mux.on(&#x27;data&#x27;, ...)</span></span><br><span class=\"line\"><span class=\"comment\">// ObjectMultiplex 内部实现 mux 是parent流 不存储任何数据</span></span><br><span class=\"line\"><span class=\"comment\">// 所有数据都是由各子的子流substream 中存储</span></span><br><span class=\"line\"><span class=\"comment\">// 所以这里如果 mux.on(&#x27;data&#x27;, ...) 是永远都不会触发的</span></span><br><span class=\"line\">streamA.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;streamA data event:&#x27;</span>, data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果:</span></span><br><span class=\"line\"><span class=\"comment\">// transform:  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   name: &quot;streamA&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">//   data: &quot;transformStream test&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// streamA data event: transformStream test</span></span><br></pre></td></tr></table></figure>\n\n<p>数据流向大概是:</p>\n<ol>\n<li>transformStream的transform触发，transform内触发this.push</li>\n<li>因pipe连接mux流，transformStream的可读流数据 触发mux流的_write</li>\n<li>mux流的write触发 内部substreams[&#39;streamA&#39;] 触发streamA的push函数</li>\n<li>继而 streamA的_read触发</li>\n</ol>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p><img src=\"/./parse_object_multiplex/1.png\" alt=\"1\" loading=\"lazy\"></p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style: none; padding-left: 0; margin-left: 40px\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px\">1.</span><span style=\"display: inline-block; vertical-align: top; margin-left: 10px;\">readable-stream是Node.js官方出的库,旨在提供Streams模块的兼容性实现。允许开发者在不同的Node.js版本中使用一致的<code>StreamsAPI</code>，同时也为浏览器环境提供支持<a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></span></li></ol></div></div>","categories":["技术"],"tags":["web3","chrome-extension","metamask"]},{"title":"理解@metamask/post-message-stream包","url":"/parse_post_message_stream/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL3Bvc3QtbWVzc2FnZS1zdHJlYW0=\">@metamask&#x2F;post-message-stream<i class=\"fa fa-external-link-alt\"></i></span> 是MetaMask提供的一个在<code>window.postMessage</code>实现的双工对象流(基于 Duplex 的objectMode)</p>\n<p>该库起初仅支持 <code>window.postMessage</code>的环境, 后续该库扩展环境范围:</p>\n<ul>\n<li>window.postMessage: <code>window.postMessage</code> 和 <code>window.addEventListener(&#39;message&#39;,...)</code></li>\n<li>runtime: 浏览器插件中的 <code>chrome.runtime.sendMessage</code>和<code>chrome.runtime.onMessage.addListener</code></li>\n<li>webWorker:<ul>\n<li>web端的<code>WebWorkerParentPostMessageStream</code>: <code>worker.postMessage</code>和<code>worker.onmessage</code></li>\n<li>worker端的<code>WebWorkerPostMessageStream</code>: <code>self.postMessage</code> <code>self.addEventListener(&#39;message&#39;, ...)</code></li>\n</ul>\n</li>\n<li>node-process:<ul>\n<li>父进程<code>ProcessParentMessageStream</code>: <code>process.send</code>和<code>process.on(&#39;message&#39;, ...)</code></li>\n<li>子进程<code>ProcessMessageStream</code>: <code>globalThis.process.send</code>和<code>globalThis.process.on(&#39;message&#39;, ...)</code></li>\n</ul>\n</li>\n<li>node-thread:<ul>\n<li>父线程 <code>ThreadParentMessageStream</code>: <code>worker.postMessage</code> 和 <code>worker.on(&#39;message&#39;, ...)</code></li>\n<li>子线程<code>ThreadMessageStream</code>: <code>parentPort.postMessage</code> 和 <code>parentPort.on(&#39;message&#39;, ...)</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><p>未使用该库之前</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.<span class=\"property\">data</span>.<span class=\"property\">target</span> === <span class=\"string\">&#x27;nameA&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">data</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">postMessage</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;nameB&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">target</span>: <span class=\"string\">&#x27;nameA&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">WindowPostMessageStream</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@metamask/post-message-stream&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> streamA = <span class=\"keyword\">new</span> <span class=\"title class_\">WindowPostMessageStream</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;streamA&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">target</span>: <span class=\"string\">&#x27;streamB&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// postMessage</span></span><br><span class=\"line\">streamA.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> streamB = <span class=\"keyword\">new</span> <span class=\"title class_\">WindowPostMessageStream</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;streamB&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">target</span>: <span class=\"string\">&#x27;streamA&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// on message</span></span><br><span class=\"line\">streamB.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p>UML类图: <code>- Private</code>、<code># Protected</code>、<code>* Abstract(渲染出来是斜体)</code>、<code>$ Static(渲染出来是下划线)</code></p>\n<pre><code class=\"highlight mermaid\">classDiagram\ndirection RL\nclass BasePostMessageStream&#123;\n  -Boolean _init\n  -Boolean _haveSyn\n  -Log _log\n  #_handshake()\n  #_onData()\n  #_postMessage()*\n  +_read()\n  +_write()\n  +_setLogger()\n&#125;\nnamespace window &#123;\n  class WindowPostMessageStream &#123;\n    #_postMessage()\n    -_onMessage()\n    _destroy()\n  &#125;\n&#125;\nBasePostMessageStream &lt;|-- WindowPostMessageStream: 继承</code></pre>\n\n<p><code>ProcessMessageStream</code>,<code>ProcessParentMessageStream</code><br><code>ThreadMessageStream</code>, <code>ThreadParentMessageStream</code><br><code>BrowserRuntimePostMessageStream</code><br><code>WebWorkerPostMessageStream</code>, <code>WebWorkerParentPostMessageStream</code><br>与WindowPostMessageStream成员类似</p>\n<p>其中基类<code>BasePostMessageStream</code>继承于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9yZWFkYWJsZS1zdHJlYW0=\">readable-stream<i class=\"fa fa-external-link-alt\"></i></span><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--error hint--medium hint--rounded hint--bounce\" aria-label=\"readable-stream是Node.js官方出的库,旨在提供Streams模块的兼容性实现。允许开发者在不同的Node.js版本中使用一致的`StreamsAPI`，同时也为浏览器环境提供支持\n\">[1]</span></a></sup>的<code>Duplex</code></p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style: none; padding-left: 0; margin-left: 40px\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px\">1.</span><span style=\"display: inline-block; vertical-align: top; margin-left: 10px;\">readable-stream是Node.js官方出的库,旨在提供Streams模块的兼容性实现。允许开发者在不同的Node.js版本中使用一致的<code>StreamsAPI</code>，同时也为浏览器环境提供支持<a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></span></li></ol></div></div>","categories":["技术"],"tags":["web3","chrome-extension","metamask","stream","npm-package"]},{"title":"网站地图(sitemap)","url":"/sitemap/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>站点地图（Sitemap）描述了网站的架构。 它可以是一个任意形式的文档(xml&#x2F;html)，是列出网站中所有页面的一个网页。</p>\n<p>有助于访问者以及搜索引擎的爬虫找到网站中的页面(对seo有利)。</p>\n<p>一般情况下，也就是 <code>https://domain.com/sitemap.xml</code></p>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><p>网站地图可以有多种格式 XML文件（sitemap.xml）、HTML文件(sitemap.html)、TXT文件(sitemap.txt)或RSS文件(rss.xml)，</p>\n<p>通常是分级的XML结构</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sitemapindex</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&#x27;http://www.sitemaps.org/schemas/sitemap/0.9&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span>https://www.youtube.com/ads/sitemap.xml<span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span>https://www.youtube.com/sitemaps/misc.xml<span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span>https://www.youtube.com/kids/sitemap.xml<span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span>https://www.youtube.com/trends/sitemap.xml<span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">sitemapindex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如上面 从首页的<code>sitemap.xml</code>指向了子模块中的多个<code>sitemap.xml</code></p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><ul>\n<li>b站的sitemap: <code>https://www.bilibili.com/sitemap.xml</code></li>\n<li>github的sitemap(以html的格式): <code>https://github.com/sitemap</code></li>\n<li>youtube的sitemap: <code>https://www.youtube.com/sitemaps/sitemap.xml</code></li>\n<li>hexo的sitemap: <code>https://hexo.io/sitemap.xml</code><ul>\n<li>hexo生成sitemap的插件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWdlbmVyYXRvci1zaXRlbWFw\">hexo-generator-sitemap<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n</ul>\n","categories":["技术"],"tags":["科普","seo"]},{"title":"Page Not Found","url":"//404.html","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><div style=\"display:flex; flex-direction: column; justify-content: center; align-items: center; min-height: 60vh\">\n  <img src=\"/images/404.svg\" style=\"max-width: 300px\">\n</div>\n"},{"title":"分类","url":"/categories/index.html","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">"},{"title":"标签","url":"/tags/index.html","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">"},{"url":"/index.html","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n"}]