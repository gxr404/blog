[{"title":"一文读懂Bt种子、磁力链接、直链、p2p这些下载的区别","url":"/p2p/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><!--page header-->\n\n<ul>\n<li>什么是直链、Bt种子、磁力、p2p?</li>\n<li>它们有什么区别，原理分别是什么?</li>\n</ul>\n<h2 id=\"直链\"><a href=\"#直链\" class=\"headerlink\" title=\"直链\"></a>直链</h2><p>我们先说什么是直链, 直链就是<strong>直接从服务器下载数据</strong>。</p>\n<p>直链是我们日常生活中最最最常见的下载方式，我们从应用商店下载软件 或者从网页下载各种图片、音乐、视频等。<br>可以直接被下载的就是直链。比如我们打开网页，想下载一个微信，当你点击下载按钮的时候，网页就会直接帮你下载。</p>\n<p>这时我们复制它的下载连接,可以看到使用的是http协议</p>\n<img style=\"width: 400px\" src=\"/p2p/v2-d0e5e412c39b1f15327554b7ba4e8af6_1440w-655304.jpeg\" />\n\n<!-- ![v2-d0e5e412c39b1f15327554b7ba4e8af6_1440w.jpg](/p2p/v2-d0e5e412c39b1f15327554b7ba4e8af6_1440w-655304.jpeg) -->\n\n<p>那我们在看一下磁力和种子是怎样的 我们直接复制它的链接</p>\n<img style=\"width: 400px\" src=\"/p2p/v2-a17f8e888b146729380226e669d46fd1_1440w-582406.jpeg\" />\n\n<!-- ![v2-a17f8e888b146729380226e669d46fd1_1440w.jpg](/p2p/v2-a17f8e888b146729380226e669d46fd1_1440w-582406.jpeg) -->\n\n<p>这个链接是什么意思，我们等会在说</p>\n<p>有人可能会问为什么种子的链接是走http协议的</p>\n<p>别急，我们直接点击种子下载。可以看到只是通过http协议给你一个种子文件，种子的格式为<code>torrent</code></p>\n<img style=\"width: 100px\" src=\"/p2p/v2-2a74af32d40eaeb43ce7f03941fc198f_1440w-915544.jpeg\" />\n\n<!-- ![v2-2a74af32d40eaeb43ce7f03941fc198f_1440w.jpg](/p2p/v2-2a74af32d40eaeb43ce7f03941fc198f_1440w-915544.jpeg) -->\n\n<p>你得自己拿着这个种子通过下载器去下载。<br>我这里就以迅雷为例, 我们把种子拖拽到迅雷上, 它就会自动识别种子。<br>可以看到这部18.21GB的电影就在这里, 然后我们在点击下载就可以拿到了</p>\n<img style=\"width: 300px\" src=\"/p2p/v2-3aeec0f8cf29fcd58177b910e5f9a41a_1440w-511981.jpeg\" />\n\n<!-- ![v2-3aeec0f8cf29fcd58177b910e5f9a41a_1440w.jpg](/p2p/v2-3aeec0f8cf29fcd58177b910e5f9a41a_1440w-511981.jpeg) -->\n\n<h2 id=\"P2P\"><a href=\"#P2P\" class=\"headerlink\" title=\"P2P\"></a>P2P</h2><p>P2P就是peer to peer的缩写，翻译过来可以理解为个人对个人(点对点)</p>\n<p>直链把服务器作为中心让用户去下载。<br>因为服务器的带宽有限，所以下载的人越多，每个人所能享受的下载带宽就会分的更少,下载速度就越慢</p>\n<div style=\"display:flex;gap:6px\">\n  <img style=\"width:50%\" src=\"/p2p/v2-a70e094a508145e75eace150bfd78a19_1440w-899251.jpeg\">\n  <img style=\"width:50%\" src=\"/p2p/v2-7e08da63ea1700012da40c5e8a026827_1440w-035100.jpeg\">\n</div>\n\n<blockquote>\n<p>直链: 下载的人越多,下载速度就越慢</p>\n</blockquote>\n<!-- ![v2-a70e094a508145e75eace150bfd78a19_1440w.jpg](/p2p/v2-a70e094a508145e75eace150bfd78a19_1440w-899251.jpeg)\n\n![v2-7e08da63ea1700012da40c5e8a026827_1440w.jpg](/p2p/v2-7e08da63ea1700012da40c5e8a026827_1440w-035100.jpeg) -->\n\n<p>而P2P就是“<strong>去中心化</strong>”，<strong>不依赖服务器</strong></p>\n<p>每个人都相当于一台服务器, 你<strong>在下载的同时，也在上传数据</strong>。<br>因为你下载的数据就是别人所上传给你的, 你所享受下载的同时也需要服务与别人, 这就是人人为我，我为人人的精神。</p>\n<img style=\"width: 500px\" src=\"/p2p/v2-b168ca4cb676d4ae9844ce9397d6d215_1440w-342080.jpeg\" />\n\n<!-- ![v2-b168ca4cb676d4ae9844ce9397d6d215_1440w.jpg](/p2p/v2-b168ca4cb676d4ae9844ce9397d6d215_1440w-342080.jpeg) -->\n\n<p>所以与直链相反, <strong>下载的人越多，下载的速度就越快</strong></p>\n<blockquote>\n<p>P2P: 下载的人越多，下载的速度就越快</p>\n</blockquote>\n<h2 id=\"Bt种子和磁力链接\"><a href=\"#Bt种子和磁力链接\" class=\"headerlink\" title=\"Bt种子和磁力链接\"></a>Bt种子和磁力链接</h2><p>那什么是Bt种子和磁力链接呢？ 其实<strong>Bt种子和磁力链接的下载方式都是P2P</strong>!!</p>\n<p>它们的区别只是<strong>寻找资源的方式不同</strong></p>\n<img style=\"width: 500px\" src=\"/p2p/v2-e4674ce7cb1a436ab08c82930da8d13b_1440w-381886.jpeg\" />\n\n<!-- ![v2-e4674ce7cb1a436ab08c82930da8d13b_1440w.jpg](/p2p/v2-e4674ce7cb1a436ab08c82930da8d13b_1440w-381886.jpeg) -->\n\n<h3 id=\"磁力链接\"><a href=\"#磁力链接\" class=\"headerlink\" title=\"磁力链接\"></a>磁力链接</h3><p>之前我们看到磁力链接的地址是</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">magnet:?xt=urn:btih:xxxxxxx</span><br><span class=\"line\"></span><br><span class=\"line\">// 从dn参数可以看出下载的是mp4</span><br><span class=\"line\">magnet:?xt=urn:btih:99af18e766b0c28318b643f1112e7b6fa427deb0&amp;dn=中国机长-2019_BD国语中字.mp4</span><br><span class=\"line\"></span><br><span class=\"line\">// 也有磁力链接下载的内容是bt种子的情况</span><br><span class=\"line\">magnet:?xt=urn:btih:xxx&amp;dn=xxxx.torrent</span><br></pre></td></tr></table></figure>\n\n<p>这样的什么意思呢，磁力链采用的是 DHT 全称是<code>Distributed Hash Table</code>, 意思就是分布式哈希表。</p>\n<p>顾名思义就是一种分布式的存储方法, 它以<code>magnet:?xt=urn:btih:</code>开头, 后面跟着的就是文件的哈希表生成的特征码。</p>\n<p>你可以把它理解为一个资源的身份证，你想要下载某个资源，就通过这个身份证去找到它。<br>不过这不是一般的身份证，这个身份证比较特殊，它分成了很多个小块。</p>\n<p>这些小块都有一个唯一的id，把这么多小块的id整理成一个数据表格（哈希表）。</p>\n<p>在下载前会将这个表分发给不同的用户, 每个用户就可以通过这个数据表格进行寻找地址和下载。</p>\n<p>比如举个简单的磁力下载方式的例子:</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">用户A想要下载资源《雷神》, 但是他不知道哪里才有《雷神》</span><br><span class=\"line\"></span><br><span class=\"line\">所以他就问附近的用户B和用户C知不知道</span><br><span class=\"line\"></span><br><span class=\"line\">如果B和C也不知道</span><br><span class=\"line\"></span><br><span class=\"line\">那么用户B和C就会问附近的用户D E F G</span><br><span class=\"line\"></span><br><span class=\"line\">以此类推，终于</span><br><span class=\"line\"></span><br><span class=\"line\">最终G知道哪里有资源《雷神》</span><br><span class=\"line\"></span><br><span class=\"line\">然后就告诉了用户A哪些人电脑上有资源《雷神》</span><br><span class=\"line\"></span><br><span class=\"line\">然后用户A就跟这些人联系上了并进行了下载</span><br></pre></td></tr></table></figure>\n\n<img style=\"width:500px\" src=\"/p2p/v2-b2d56ef2ea36ec94bf8a772abf1c5e50_1440w-250175.jpeg\">\n\n<img style=\"width:500px\" src=\"/p2p/v2-5b856e95f72d7b692cf226275111fc2c_1440w-382526.jpeg\">\n\n<img style=\"width:500px\" src=\"/p2p/v2-434271fc19a22379d5b84b423c14f3a8_1440w-903221.jpeg\">\n\n<!-- ![v2-b2d56ef2ea36ec94bf8a772abf1c5e50_1440w.jpg](/p2p/v2-b2d56ef2ea36ec94bf8a772abf1c5e50_1440w-250175.jpeg)\n![v2-5b856e95f72d7b692cf226275111fc2c_1440w.jpg](/p2p/v2-5b856e95f72d7b692cf226275111fc2c_1440w-382526.jpeg)\n![v2-434271fc19a22379d5b84b423c14f3a8_1440w.jpg](/p2p/v2-434271fc19a22379d5b84b423c14f3a8_1440w-903221.jpeg) -->\n\n<h3 id=\"Bt种子\"><a href=\"#Bt种子\" class=\"headerlink\" title=\"Bt种子\"></a>Bt种子</h3><p>Bt种子的下载方式要简便一点, 他不用层层向这么多人打听。</p>\n<p>从种子上解析就可以查询到谁会有资源《雷神》，这个谁就相当于上面提到的用户G，它也叫做<strong>追踪服务器</strong>。</p>\n<p>然后根据用户G（追踪服务器）提供的信息地址, 去找那些用户进行下载就可以了。</p>\n<p>所以种子和磁力就是<strong>寻找资源的方式不同</strong>而已</p>\n<img style=\"width:500px\" src=\"/p2p/v2-58cb3f02c9b5f38af81c0e8ce08462dd_1440w-818501.jpeg\">\n<img style=\"width:500px\" src=\"/p2p/v2-434271fc19a22379d5b84b423c14f3a8_1440w-903221.jpeg\">\n\n\n<!-- ![v2-58cb3f02c9b5f38af81c0e8ce08462dd_1440w.jpg](/p2p/v2-58cb3f02c9b5f38af81c0e8ce08462dd_1440w-818501.jpeg)\n![v2-434271fc19a22379d5b84b423c14f3a8_1440w.jpg](/p2p/v2-434271fc19a22379d5b84b423c14f3a8_1440w-903221.jpeg) -->\n\n<p>不难发现，我们通过p2p下载的资源很多都是些非法资源。</p>\n<p>比如说常见的盗版电影，老司机的兰博基尼，受版权保护的其他资源等。</p>\n<p>如果直接通过直链下载，提供该下载的服务器会被直接封杀和律师函警告。</p>\n<p>bt种子如果查到了追踪服务器，也会被封杀掉该追踪服务器。</p>\n<p>不过一般种子比较多，而且也很难被查杀</p>\n<blockquote>\n<p>即使追踪服务器(Tracker)全挂了，现代BT客户端的补救措施如: 客户端支持DHT，追踪服务器失效会使用DHT帮助找到活跃的Peer</p>\n</blockquote>\n<p>那什么p2p下载器最好用呢?</p>\n<p>众所周知，国内用迅雷的用户是最多的, 但是不开会员的话，可能下载速度不会如你所意，也有很多其它的免费的下载器比迅雷要“干净”、“文明”。</p>\n<p>但是我个人还是用的迅雷，因为我试过很多下载器同一个磁力链接迅雷要比其他的下载器快很多。</p>\n<p>而且很多冷门资源其他的下载器都是0kb&#x2F;s, 所以我不得不用迅雷。</p>\n<p>如果你是一个不怎么经常需要用到p2p的, 那么我建议你可以找一些干净的下载器。</p>\n<p>如果你需要经常p2p下载，还是一些比较冷门的资源, 那么迅雷觉得是最适合的，当然前提你得开会员。</p>\n<p>可能有人会问了，你刚刚不是说了他们的下载原理吗。</p>\n<p>都是以<strong>拥有该资源的用户作为节点</strong> 拥有该资源的用户越多下载的速度就会越快啊，跟下载器有什么关系。</p>\n<p>我之前试了很多个同样的bt磁力链接， 用迅雷的速度就是要比其他的更快， 不信你们也可以试一试。</p>\n<p>至于原因，因为迅雷的技术也未对外公开， 所以我也不百分百保证是因为什么。</p>\n<p>我觉得CSDN上有位博客写的不错， 所以分享一下，可以参考一下:</p>\n<img style=\"width:500px\" src=\"/p2p/v2-1bcc85c2042ea806c824edef98e6f41e_1440w-727348.jpeg\">\n<!-- ![v2-1bcc85c2042ea806c824edef98e6f41e_1440w.jpg](/p2p/v2-1bcc85c2042ea806c824edef98e6f41e_1440w-727348.jpeg) -->\n\n<p>那么有人会说, 我不想服务给他人了要怎么办。</p>\n<p>有两种办法:</p>\n<ul>\n<li><p>第一种是删除掉你下载的磁力资源</p>\n</li>\n<li><p>第二种是关闭p2p的下载器</p>\n</li>\n</ul>\n<p>没错，比如迅雷，不管你是否在下载, 只要你打开它, 你就可以通过任务管理器看到有网速在上传。</p>\n<p>你关闭该程序后马上就会恢复到了0</p>\n<p>但是怎么说呢，如果占用的带宽特别低, 不影响使用, 我还是建议你们大方一点.</p>\n<p>因为我怕哪天轮到我下载的时候😂</p>\n<p>世界会突然异常<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS92aWRlby9CVjF0VjR5MXg3VVA/c3BtX2lkX2Zyb209MzMzLjk5OS4wLjA=\">安静<i class=\"fa fa-external-link-alt\"></i></span>~</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>有意思的讨论</p>\n<ul>\n<li>我们从迅雷下载的资源，都是带了标识的，开机并且开了迅雷的时候，就处于随时上传的状态，可以被别人下载。我们电脑其他的资料没有这种标识，不会被迅雷识别用上传作他人下载，是这个意思吗？<ul>\n<li>可以这么理解</li>\n</ul>\n</li>\n</ul>\n<div class=\"markdown-alert markdown-alert-warning\">\n<p class=\"markdown-alert-title\"><svg class=\"octicon octicon-alert mr-2\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\"></path></svg>Warning</p>\n<p>非原创, 仅为了转载留存😂</p>\n</div>\n<!--page footer-->\n<ul>\n<li>原文: <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NTEzMzcxMjg=\">https://zhuanlan.zhihu.com/p/551337128<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>视频版: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS92aWRlby9CVjF0VjR5MXg3VVA/c3BtX2lkX2Zyb209MzMzLjk5OS4wLjA=\">https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1tV4y1x7UP%3Fspm_id_from%3D333.999.0.0<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["技术"],"tags":["科普","转载","p2p"]},{"title":"理解metamask的extension-port-stream包","url":"/parse-extension-port-stream/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL2V4dGVuc2lvbi1wb3J0LXN0cmVhbQ==\">extension-port-stream<i class=\"fa fa-external-link-alt\"></i></span>将<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Nb3ppbGxhL0FkZC1vbnMvV2ViRXh0ZW5zaW9ucy9BUEkvcnVudGltZS9Qb3J0\">浏览器插件上的Runtime.Port对象<i class=\"fa fa-external-link-alt\"></i></span> 转成stream流对象.</p>\n<p>继承于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9yZWFkYWJsZS1zdHJlYW0=\">readable-stream<i class=\"fa fa-external-link-alt\"></i></span><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--error hint--medium hint--rounded hint--bounce\" aria-label=\"readable-stream是Node.js官方出的库,旨在提供Streams模块的兼容性实现。允许开发者在不同的Node.js版本中使用一致的`StreamsAPI`，同时也为浏览器环境提供支持\n\">[1]</span></a></sup>的<code>Duplex</code></p>\n<p>该库比较简单:</p>\n<p>stream实例对象上的<code>_write</code>调用了portInstance.postMessage方法 作为输出<br>监听<code>portInstance.onMessage.addListener</code>(内部调用了<code>stream.push</code>方法)作为输入</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li><code>@metamask/post-message-stream</code>中的runtime是对应浏览器插件中的 <code>chrome.runtime.sendMessage</code>和<code>chrome.runtime.onMessage.addListener</code> 这种适用于<strong>一次性发送和接收消息</strong></li>\n<li><code>extension-port-stream</code>中是对应 <code>portInstance = chrome.runtime.connect</code> 中的 <code>portInstance.postMessage</code> 和 <code>portInstance.onMessage.addListener</code>持久的双向通信通道，适用于需要持续交互的场景</li>\n</ul>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style: none; padding-left: 0; margin-left: 40px\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px\">1.</span><span style=\"display: inline-block; vertical-align: top; margin-left: 10px;\">readable-stream是Node.js官方出的库,旨在提供Streams模块的兼容性实现。允许开发者在不同的Node.js版本中使用一致的<code>StreamsAPI</code>，同时也为浏览器环境提供支持<a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></span></li></ol></div></div>","categories":["技术"],"tags":["web3","chrome-extension","metamask","stream","npm-package"]},{"title":"chrome插件开发基础","url":"/chrome-extension/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>chrome插件可以扩展浏览器的功能，为用户提供更便捷的操作或增强网页的交互体验。</p>\n<h2 id=\"主要文件内容\"><a href=\"#主要文件内容\" class=\"headerlink\" title=\"主要文件内容\"></a>主要文件内容</h2><ul>\n<li>Manifest （清单文件）主要的插件配置清单，包含插件的名称、版本号、图标、脚本文件名称等<ul>\n<li>⭐️ permissions 权限</li>\n</ul>\n</li>\n<li>Content Script （内容脚本）<ul>\n<li>injected script，是插件<strong>注入到页面的脚</strong>本，但是不<strong>会体现在页面 DOM</strong> 结构里。</li>\n<li>content script <strong>可以操作 DOM</strong>，但是它和页面其他的脚本是隔离的，<strong>访问不到其他脚本</strong>定义的变量、函数等，相当于运行在<strong>单独的沙盒</strong>里。</li>\n<li>content script 可以<strong>调用有限的 chrome 插件 API</strong>，网络请求收到同源策略限制。</li>\n<li>调试可以在 chrome devtool 里的source 里面的 content script</li>\n</ul>\n</li>\n<li>Background Script （后台脚本）<ul>\n<li>可以调用<strong>全部的 chrome 插件 API</strong>，实现跨域请求、网页截屏、弹出 chrome 通知消息等功能。</li>\n<li>相当于在一个隐藏的浏览器页面内默默运行。(类似<strong>独立的一个线程</strong>)</li>\n</ul>\n</li>\n<li>功能页面(相当于多页应用)<ul>\n<li>包括点击插件图标弹出的页面(简称 popup)popup.html popup.js...</li>\n<li>插件的配置页面(简称 options)</li>\n<li>浏览器新增tab默认页 (newtab)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"各部分权限\"><a href=\"#各部分权限\" class=\"headerlink\" title=\"各部分权限\"></a>各部分权限</h2><p><img src=\"/./chrome-extension/1.png\" alt=\"1\" loading=\"lazy\"></p>\n<blockquote>\n<p>ps: injected script 可以理解为 源web页脚本</p>\n</blockquote>\n<h2 id=\"通信方式\"><a href=\"#通信方式\" class=\"headerlink\" title=\"通信方式\"></a>通信方式</h2><p><img src=\"/./chrome-extension/2.png\" alt=\"2\" loading=\"lazy\"></p>\n<blockquote>\n<p>ps: injected script 可以理解为 源web页脚本</p>\n</blockquote>\n<h3 id=\"content-script-popup与background\"><a href=\"#content-script-popup与background\" class=\"headerlink\" title=\"content-script&#x2F;popup与background\"></a>content-script&#x2F;popup与background</h3><ol>\n<li><code>chrome.runtime.sendMessage</code> 和 <code>chrome.runtime.onMessage.addListener</code> 适用于<strong>一次性发送和接收消息</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送方 (内容脚本或弹窗)</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"title function_\">sendMessage</span>(&#123; <span class=\"attr\">greeting</span>: <span class=\"string\">&quot;hello&quot;</span> &#125;, <span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Response:&quot;</span>, response);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收方 (后台脚本)</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onMessage</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">message, sender, sendResponse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Received message:&quot;</span>, message);</span><br><span class=\"line\">  <span class=\"title function_\">sendResponse</span>(&#123; <span class=\"attr\">farewell</span>: <span class=\"string\">&quot;goodbye&quot;</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// Return true to keep the message channel open for async response.</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>chrome.tabs.sendMessage(tabId, message, options)</code> 允许向特定标签的内容脚本(content-script)发送消息<br>使用前需调用<code>chrome.tabs.query</code>获取 tabId 以指定那个特定的tab标签也发送消息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">chrome.<span class=\"property\">tabs</span>.<span class=\"title function_\">query</span>(&#123;<span class=\"attr\">active</span>: <span class=\"literal\">true</span>, <span class=\"attr\">currentWindow</span>: <span class=\"literal\">true</span>&#125;, <span class=\"keyword\">function</span>(<span class=\"params\">tabs</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 发送到当前激活的标签页面</span></span><br><span class=\"line\">  chrome.<span class=\"property\">tabs</span>.<span class=\"title function_\">sendMessage</span>(tabs[<span class=\"number\">0</span>].<span class=\"property\">id</span>, &#123;<span class=\"attr\">greeting</span>: <span class=\"string\">&quot;hello&quot;</span>&#125;, <span class=\"keyword\">function</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">farewell</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>chrome.runtime.connect</code> 和 <code>chrome.runtime.onConnect</code> 持久的双向通信通道，适用于需要持续交互的场景。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送方 (内容脚本)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = chrome.<span class=\"property\">runtime</span>.<span class=\"title function_\">connect</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;content-channel&quot;</span> &#125;);</span><br><span class=\"line\">port.<span class=\"title function_\">postMessage</span>(&#123; <span class=\"attr\">greeting</span>: <span class=\"string\">&quot;hello&quot;</span> &#125;);</span><br><span class=\"line\">port.<span class=\"property\">onMessage</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Response:&quot;</span>, response);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收方 (后台脚本)</span></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onConnect</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">port</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Connected:&quot;</span>, port.<span class=\"property\">name</span>);</span><br><span class=\"line\">  port.<span class=\"property\">onMessage</span>.<span class=\"title function_\">addListener</span>(<span class=\"function\">(<span class=\"params\">message</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Message received:&quot;</span>, message);</span><br><span class=\"line\">    port.<span class=\"title function_\">postMessage</span>(&#123; <span class=\"attr\">response</span>: <span class=\"string\">&quot;hi from background&quot;</span> &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>chrome.tabs.connect(tabId)</code>指定标签中的内容脚本(content-script)之间的连接<br>使用前需调用<code>chrome.tabs.query</code>获取 tabId 以指定那个特定的tab标签也发送消息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">browser.<span class=\"property\">tabs</span>.<span class=\"title function_\">connect</span>(</span><br><span class=\"line\">  tabId,      <span class=\"comment\">// 整数</span></span><br><span class=\"line\">  connectInfo <span class=\"comment\">// 可选的对象</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"content-script-与-web页\"><a href=\"#content-script-与-web页\" class=\"headerlink\" title=\"content-script 与 web页\"></a>content-script 与 web页</h3><ol>\n<li><code>window.postMessage</code> 和 <code>window.addEventListener(&quot;message&quot;, ...)</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 网页脚本</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">source</span> !== <span class=\"variable language_\">window</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">data</span>.<span class=\"property\">type</span> === <span class=\"string\">&quot;FROM_EXTENSION&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Message from extension:&quot;</span>, event.<span class=\"property\">data</span>.<span class=\"property\">payload</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">postMessage</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;TO_EXTENSION&quot;</span>, <span class=\"attr\">payload</span>: <span class=\"string\">&quot;Hello from page&quot;</span> &#125;, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内容脚本</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">postMessage</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;FROM_EXTENSION&quot;</span>, <span class=\"attr\">payload</span>: <span class=\"string\">&quot;Hello from extension&quot;</span> &#125;, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">source</span> !== <span class=\"variable language_\">window</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.<span class=\"property\">data</span>.<span class=\"property\">type</span> === <span class=\"string\">&quot;TO_EXTENSION&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Message from page:&quot;</span>, event.<span class=\"property\">data</span>.<span class=\"property\">payload</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"跨插件通信\"><a href=\"#跨插件通信\" class=\"headerlink\" title=\"跨插件通信\"></a>跨插件通信</h3><p>除了本身chrome extension 还可以与其他extension通信</p>\n<blockquote>\n<p><strong>发送请求信息时，必须提供chrome插件的 ID</strong></p>\n</blockquote>\n<ol>\n<li>一次性通信 <code>chrome.runtime.sendMessage(id, message)</code> 和<code>chrome.runtime.onMessageExternal()</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要通信的extension id</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> laserExtensionId = <span class=\"string\">&quot;abcdefghijklmnoabcdefhijklmnoabc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"title function_\">sendMessage</span>(laserExtensionId, &#123;<span class=\"attr\">getTargetData</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">targetInRange</span>(response.<span class=\"property\">targetData</span>))</span><br><span class=\"line\">      chrome.<span class=\"property\">runtime</span>.<span class=\"title function_\">sendMessage</span>(laserExtensionId, &#123;<span class=\"attr\">activateLasers</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onMessageExternal</span>.<span class=\"title function_\">addListener</span>(</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">request, sender, sendResponse</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 黑名单，不允许此扩展程序访问</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sender.<span class=\"property\">id</span> === blocklistedExtension)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.<span class=\"property\">getTargetData</span>)</span><br><span class=\"line\">      <span class=\"title function_\">sendResponse</span>(&#123;<span class=\"attr\">targetData</span>: targetData&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.<span class=\"property\">activateLasers</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> success = <span class=\"title function_\">activateLasers</span>();</span><br><span class=\"line\">      <span class=\"title function_\">sendResponse</span>(&#123;<span class=\"attr\">activateLasers</span>: success&#125;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>长链接通信<code>chrome.runtime.connect(id)</code> 和 <code>chrome.runtime.onConnectExternal.addListener</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要通信的extension id</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> laserExtensionId = <span class=\"string\">&quot;abcdefghijklmnoabcdefhijklmnoabc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> port = chrome.<span class=\"property\">runtime</span>.<span class=\"title function_\">connect</span>(laserExtensionId);</span><br><span class=\"line\">port.<span class=\"title function_\">postMessage</span>(...);</span><br><span class=\"line\"></span><br><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"property\">onConnectExternal</span>.<span class=\"title function_\">addListener</span>(<span class=\"keyword\">function</span>(<span class=\"params\">port</span>) &#123;</span><br><span class=\"line\">  port.<span class=\"property\">onMessage</span>.<span class=\"title function_\">addListener</span>(<span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"web页直接与-background通信\"><a href=\"#web页直接与-background通信\" class=\"headerlink\" title=\"web页直接与 background通信\"></a>web页直接与 background通信</h3><div class=\"markdown-alert markdown-alert-tip\">\n<p class=\"markdown-alert-title\"><svg class=\"octicon octicon-light-bulb mr-2\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z\"></path></svg>Tip</p>\n<p>注意: manifest配置 需 externally_connectable.matches！！这个很重要 只有配置了该值 才能在web页直接访问到 <code>chrome.runtime</code></p>\n</div>\n<p>如果未指定<code>externally_connectable</code>健，则默认所有chrome extension都可以链接，但网页无法直接连接，<br>当指定externally_connectable，如果未指定 <code>externally_connectable.ids: [&quot;*&quot;]</code> 则其他扩展将失去对你的扩展的连接，这可能会导致意想不到的结果 需注意。</p>\n<ul>\n<li><code>externally_connectable.ids</code>指定允许其他扩展连接你的扩展的id</li>\n<li><code>externally_connectable.matches</code>: 指定允许直接连接 你的扩展的的url</li>\n</ul>\n<blockquote>\n<p>扩展即是chrome extension</p>\n</blockquote>\n<p>web页直接与插件通信 需指定插件id 与 跨插件通信差不多</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">chrome.<span class=\"property\">runtime</span>.<span class=\"title function_\">sendMessage</span>(editorExtensionId, &#123;<span class=\"attr\">openUrlInEditor</span>: url&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">function</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!response.<span class=\"property\">success</span>) <span class=\"title function_\">handleError</span>(url);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"storage\"><a href=\"#storage\" class=\"headerlink\" title=\"storage\"></a>storage</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kb2NzL2V4dGVuc2lvbnMvcmVmZXJlbmNlL2FwaS9zdG9yYWdl\">官方文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n<div class=\"markdown-alert markdown-alert-tip\">\n<p class=\"markdown-alert-title\"><svg class=\"octicon octicon-light-bulb mr-2\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z\"></path></svg>Tip</p>\n<p>美观点观察chrome的storage可使用该插件: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHJvbWV3ZWJzdG9yZS5nb29nbGUuY29tL2RldGFpbC9zdG9yYWdlLWFyZWEtZXhwbG9yZXIvb2NmampqamhrcGFwb2NpZ2ltbXBwZXBqZ2ZkZWNqa2I=\">Storage Area Explorer<i class=\"fa fa-external-link-alt\"></i></span></p>\n</div>\n<p>storage存储区:</p>\n<ul>\n<li><code>storage.local</code>: 数据存储在本地，并在删除扩展时清除</li>\n<li><code>storage.sync</code>: 以利用 Chrome 的同步功能，<strong>实现同一账户下的扩展程序数据在多个设备之间同步</strong><ul>\n<li>如果已登录账户的 Chrome 离线时，希望同步存储的数据会先进行本地存储，等待浏览器上线后再进行同步。</li>\n<li>如果用户在 Chrome 设置中取消了数据同步功能，那么 chrome.storage.sync 相关方法的作用和 chrome.storage.local 一样</li>\n</ul>\n</li>\n<li><code>storage.session</code>: 在浏览器会话期间将数据保存在内存中</li>\n<li><code>storage.managed</code>: 只读存储，策略类似于选项，但由系统管理员而不是用户配置，允许为组织的所有用户预先配置扩展</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk4ODY0MTIwNjExMDk0NTY0\">https://juejin.cn/post/6998864120611094564<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzOTg1NzExNjc3NDUz\">https://juejin.cn/post/6844903985711677453<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["技术"],"tags":["chrome-extension"]},{"title":"理解@metamask/post-message-stream包","url":"/parse-post-message-stream/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL3Bvc3QtbWVzc2FnZS1zdHJlYW0=\">@metamask&#x2F;post-message-stream<i class=\"fa fa-external-link-alt\"></i></span> 是MetaMask提供的一个在<code>window.postMessage</code>实现的双工对象流(基于 Duplex 的objectMode)</p>\n<p>该库起初仅支持 <code>window.postMessage</code>的环境, 后续该库扩展环境范围:</p>\n<ul>\n<li>window.postMessage: <code>window.postMessage</code> 和 <code>window.addEventListener(&#39;message&#39;,...)</code></li>\n<li>runtime: 浏览器插件中的 <code>chrome.runtime.sendMessage</code>和<code>chrome.runtime.onMessage.addListener</code></li>\n<li>webWorker:<ul>\n<li>web端的<code>WebWorkerParentPostMessageStream</code>: <code>worker.postMessage</code>和<code>worker.onmessage</code></li>\n<li>worker端的<code>WebWorkerPostMessageStream</code>: <code>self.postMessage</code> <code>self.addEventListener(&#39;message&#39;, ...)</code></li>\n</ul>\n</li>\n<li>node-process:<ul>\n<li>父进程<code>ProcessParentMessageStream</code>: <code>process.send</code>和<code>process.on(&#39;message&#39;, ...)</code></li>\n<li>子进程<code>ProcessMessageStream</code>: <code>globalThis.process.send</code>和<code>globalThis.process.on(&#39;message&#39;, ...)</code></li>\n</ul>\n</li>\n<li>node-thread:<ul>\n<li>父线程 <code>ThreadParentMessageStream</code>: <code>worker.postMessage</code> 和 <code>worker.on(&#39;message&#39;, ...)</code></li>\n<li>子线程<code>ThreadMessageStream</code>: <code>parentPort.postMessage</code> 和 <code>parentPort.on(&#39;message&#39;, ...)</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><p>未使用该库之前</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.<span class=\"property\">data</span>.<span class=\"property\">target</span> === <span class=\"string\">&#x27;nameA&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">data</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">postMessage</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;nameB&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">target</span>: <span class=\"string\">&#x27;nameA&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">WindowPostMessageStream</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@metamask/post-message-stream&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> streamA = <span class=\"keyword\">new</span> <span class=\"title class_\">WindowPostMessageStream</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;streamA&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">target</span>: <span class=\"string\">&#x27;streamB&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// postMessage</span></span><br><span class=\"line\">streamA.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> streamB = <span class=\"keyword\">new</span> <span class=\"title class_\">WindowPostMessageStream</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;streamB&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">target</span>: <span class=\"string\">&#x27;streamA&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// on message</span></span><br><span class=\"line\">streamB.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p>UML类图: <code>- Private</code>、<code># Protected</code>、<code>* Abstract(渲染出来是斜体)</code>、<code>$ Static(渲染出来是下划线)</code></p>\n<pre><code class=\"highlight mermaid\">classDiagram\ndirection RL\nclass BasePostMessageStream&#123;\n  -Boolean _init\n  -Boolean _haveSyn\n  -Log _log\n  #_handshake()\n  #_onData()\n  #_postMessage()*\n  +_read()\n  +_write()\n  +_setLogger()\n&#125;\nnamespace window &#123;\n  class WindowPostMessageStream &#123;\n    #_postMessage()\n    -_onMessage()\n    _destroy()\n  &#125;\n&#125;\nBasePostMessageStream &lt;|-- WindowPostMessageStream: 继承</code></pre>\n\n<p><code>ProcessMessageStream</code>,<code>ProcessParentMessageStream</code><br><code>ThreadMessageStream</code>, <code>ThreadParentMessageStream</code><br><code>BrowserRuntimePostMessageStream</code><br><code>WebWorkerPostMessageStream</code>, <code>WebWorkerParentPostMessageStream</code><br>与WindowPostMessageStream成员类似</p>\n<p>其中基类<code>BasePostMessageStream</code>继承于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9yZWFkYWJsZS1zdHJlYW0=\">readable-stream<i class=\"fa fa-external-link-alt\"></i></span><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--error hint--medium hint--rounded hint--bounce\" aria-label=\"readable-stream是Node.js官方出的库,旨在提供Streams模块的兼容性实现。允许开发者在不同的Node.js版本中使用一致的`StreamsAPI`，同时也为浏览器环境提供支持\n\">[1]</span></a></sup>的<code>Duplex</code></p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style: none; padding-left: 0; margin-left: 40px\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px\">1.</span><span style=\"display: inline-block; vertical-align: top; margin-left: 10px;\">readable-stream是Node.js官方出的库,旨在提供Streams模块的兼容性实现。允许开发者在不同的Node.js版本中使用一致的<code>StreamsAPI</code>，同时也为浏览器环境提供支持<a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></span></li></ol></div></div>","categories":["技术"],"tags":["web3","chrome-extension","metamask","stream","npm-package"]},{"title":"理解@metamask/object-multiplex包","url":"/parse-object-multiplex/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL29iamVjdC1tdWx0aXBsZXg=\">@metamask&#x2F;object-multiplex<i class=\"fa fa-external-link-alt\"></i></span> 是 MetaMask 提供的一个基于<code>objectMode</code>的流多路复用库.</p>\n<p>用于将<strong>多条流整合到同一个流中处理</strong>，在<strong>同一个流中同时处理多种不同类型的数据通道</strong>（即多路复用）。</p>\n<p><code>ObjectMultiplex</code>继承于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9yZWFkYWJsZS1zdHJlYW0=\">readable-stream<i class=\"fa fa-external-link-alt\"></i></span><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--error hint--medium hint--rounded hint--bounce\" aria-label=\"readable-stream是Node.js官方出的库,旨在提供Streams模块的兼容性实现。允许开发者在不同的Node.js版本中使用一致的`StreamsAPI`，同时也为浏览器环境提供支持\n\">[1]</span></a></sup>的<code>Duplex</code></p>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><p>使用<code>ObjectMultiplex</code> 多个流同时经过一个处理流</p>\n<p>不使用<code>ObjectMultiplex</code>时:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> streamA = <span class=\"keyword\">new</span> <span class=\"title class_\">Duplex</span>(...)</span><br><span class=\"line\"><span class=\"keyword\">const</span> streamB = <span class=\"keyword\">new</span> <span class=\"title class_\">Duplex</span>(...)</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformStream = <span class=\"keyword\">new</span> <span class=\"title class_\">Transform</span>(...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时需分别添加transformStream</span></span><br><span class=\"line\">streamA.<span class=\"title function_\">pipe</span>(transformStream).<span class=\"title function_\">pipe</span>(streamA)</span><br><span class=\"line\">streamB.<span class=\"title function_\">pipe</span>(transformStream).<span class=\"title function_\">pipe</span>(streamB)</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>ObjectMultiplex</code>时, 注意transformStream需开启objectMode(因为ObjectMultiplex使用对象形式传输数据)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Transform</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;readable-stream&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ObjectMultiplex</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@metamask/object-multiplex&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mux = <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMultiplex</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> streamA = mux.<span class=\"title function_\">createStream</span>(<span class=\"string\">&#x27;streamA&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> streamB = mux.<span class=\"title function_\">createStream</span>(<span class=\"string\">&#x27;streamB&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformStream = <span class=\"keyword\">new</span> <span class=\"title class_\">Transform</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// !! 注意必须objectMode: true, object-multiplex内部是使用对象形式传输的</span></span><br><span class=\"line\">  <span class=\"attr\">objectMode</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"title function_\">transform</span>(<span class=\"params\">chunk, encoding, callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;transform: &#x27;</span>, chunk);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">push</span>(chunk);</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时只需直接往mux父流 添加 transformStream</span></span><br><span class=\"line\">mux.<span class=\"title function_\">pipe</span>(transformStream).<span class=\"title function_\">pipe</span>(mux);</span><br><span class=\"line\"></span><br><span class=\"line\">streamA.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;streamA test&#x27;</span>);</span><br><span class=\"line\">streamB.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;streamB test&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时transformStream 接收到数据 为</span></span><br><span class=\"line\"><span class=\"comment\">// transform:  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   name: &quot;streamA&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">//   data: &quot;streamA test&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// transform:  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   name: &quot;streamB&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">//   data: &quot;streamB test&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"头尾同一流的意义\"><a href=\"#头尾同一流的意义\" class=\"headerlink\" title=\"头尾同一流的意义\"></a>头尾同一流的意义</h2><p>metamask出现很多头尾同一流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">mux.<span class=\"title function_\">pipe</span>(streamA).<span class=\"title function_\">pipe</span>(mux)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mux.pipe(streamA): 将 mux 的输出（分发后的数据）发送到 streamA</li>\n<li>streamA.pipe(mux): 将 streamA 的输入（通道的数据）发送回 mux, 让 mux 收集并分发。</li>\n</ul>\n<p>mux 需要从 streamA 中收集数据，同时将数据发送给 streamA。这构成了一个完整的循环</p>\n<p>实现了双向通信: 需要既发送又接收数据，形成完整的通信链路</p>\n<h3 id=\"双向通信\"><a href=\"#双向通信\" class=\"headerlink\" title=\"双向通信\"></a>双向通信</h3><p>streamA流和transformStream流可以相互通信</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Transform</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;readable-stream&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ObjectMultiplex</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@metamask/object-multiplex&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mux = <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMultiplex</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> streamA = mux.<span class=\"title function_\">createStream</span>(<span class=\"string\">&#x27;streamA&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformStream = <span class=\"keyword\">new</span> <span class=\"title class_\">Transform</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// !! 注意必须objectMode: true, object-multiplex内部是使用对象形式传输的</span></span><br><span class=\"line\">  <span class=\"attr\">objectMode</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"title function_\">transform</span>(<span class=\"params\">chunk, encoding, callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;transform: &#x27;</span>, chunk);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">push</span>(chunk);</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时只需直接往mux父流 添加 transformStream</span></span><br><span class=\"line\">mux.<span class=\"title function_\">pipe</span>(transformStream).<span class=\"title function_\">pipe</span>(mux);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>streamA 或mux 写入数据 传给 transform流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mux.pipe(transformStream).pipe(mux)</span></span><br><span class=\"line\">streamA.<span class=\"title function_\">write</span>(<span class=\"string\">&#x27;streamA test&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 结果:</span></span><br><span class=\"line\"><span class=\"comment\">// transform:  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   name: &quot;streamA&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">//   data: &quot;streamA test&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>数据流向大概是:</p>\n<ol>\n<li>streamA的<code>_write</code>触发, 内部调用<code>this._parent.push</code>(即是mux的push函数)</li>\n<li>mux的_read触发</li>\n<li>因pipe连接mux的可读流数据 触发transformStream的transform, transform内触发this.push</li>\n<li>因pipe连接transformStream的可读流数据 触发mux的_write</li>\n<li>mux的_write 即而触发 streamA的 _read</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此时需改成以streamA 连接，因为mux.write是往streamA的可读流添加数据</span></span><br><span class=\"line\">streamA.<span class=\"title function_\">pipe</span>(transformStream).<span class=\"title function_\">pipe</span>(streamA);</span><br><span class=\"line\">mux.<span class=\"title function_\">write</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;streamA&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"string\">&#x27;mux stream call streamA&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 结果:</span></span><br><span class=\"line\"><span class=\"comment\">// transform:  mux stream call streamA</span></span><br></pre></td></tr></table></figure>\n\n<p>数据流向大概是:</p>\n<ol>\n<li>mux的<code>_write</code>触发， 内部substreams[&#39;streamA&#39;] 触发streamA的push函数</li>\n<li>streamA的_read触发</li>\n<li>因pipe连接streamA的可读流数据 触发transformStream的transform, transform内触发this.push</li>\n<li>因pipe连接transformStream的可读流数据 触发streamA的_write</li>\n<li>streamA的_write 即而触发streamA的<code>_parent</code>(即是mux)的push函数,  即而触发 mux的 _read</li>\n</ol>\n<p>transform流 写入数据 传给 streamA</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mux.pipe(transformStream).pipe(mux)</span></span><br><span class=\"line\"></span><br><span class=\"line\">transformStream.<span class=\"title function_\">write</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;streamA&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"string\">&#x27;transformStream test&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 注意这里 不能使用mux.on(&#x27;data&#x27;, ...)</span></span><br><span class=\"line\"><span class=\"comment\">// ObjectMultiplex 内部实现 mux 是parent流 不存储任何数据</span></span><br><span class=\"line\"><span class=\"comment\">// 所有数据都是由各子的子流substream 中存储</span></span><br><span class=\"line\"><span class=\"comment\">// 所以这里如果 mux.on(&#x27;data&#x27;, ...) 是永远都不会触发的</span></span><br><span class=\"line\">streamA.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;streamA data event:&#x27;</span>, data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果:</span></span><br><span class=\"line\"><span class=\"comment\">// transform:  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   name: &quot;streamA&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">//   data: &quot;transformStream test&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// streamA data event: transformStream test</span></span><br></pre></td></tr></table></figure>\n\n<p>数据流向大概是:</p>\n<ol>\n<li>transformStream的transform触发，transform内触发this.push</li>\n<li>因pipe连接mux流，transformStream的可读流数据 触发mux流的_write</li>\n<li>mux流的write触发 内部substreams[&#39;streamA&#39;] 触发streamA的push函数</li>\n<li>继而 streamA的_read触发</li>\n</ol>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p><img src=\"/./parse-object-multiplex/1.png\" alt=\"1\" loading=\"lazy\"></p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style: none; padding-left: 0; margin-left: 40px\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px\">1.</span><span style=\"display: inline-block; vertical-align: top; margin-left: 10px;\">readable-stream是Node.js官方出的库,旨在提供Streams模块的兼容性实现。允许开发者在不同的Node.js版本中使用一致的<code>StreamsAPI</code>，同时也为浏览器环境提供支持<a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></span></li></ol></div></div>","categories":["技术"],"tags":["web3","chrome-extension","metamask"]},{"title":"浅谈Torrent文件","url":"/torrent-file/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>torrent文件即我们常说的种子文件，是由<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQml0VG9ycmVudF8oJUU1JThEJThGJUU4JUFFJUFFKQ==\">BitTorrent协议<i class=\"fa fa-external-link-alt\"></i></span>所定义的。</p>\n<p>torrent文件本质就是文本文件，包含 tracker信息和文件信息两部分</p>\n<ul>\n<li>tracker信息: 记录的是 BT服务器&#x2F;Tracker服务器&#x2F;追踪服务器 相关信息</li>\n<li>文件信息: 记录该torrent中的目标文件相关信息</li>\n</ul>\n<p>如果直接用vscode打开torrent文件是一堆乱码的，因为torrent使用了一种特殊的编码Bencode</p>\n<h2 id=\"Bencode\"><a href=\"#Bencode\" class=\"headerlink\" title=\"Bencode\"></a>Bencode</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQmVuY29kZQ==\">Bencode<i class=\"fa fa-external-link-alt\"></i></span>是 BitTorrent协议中用于存储和传输松散结构数据的编码方式</p>\n<p>Bencode支持四种不同类型的值</p>\n<ul>\n<li>byte strings  字节串</li>\n<li>integers  整数</li>\n<li>lists  列表</li>\n<li>dictionaries  字典</li>\n</ul>\n<h3 id=\"动手做demo\"><a href=\"#动手做demo\" class=\"headerlink\" title=\"动手做demo\"></a>动手做demo</h3><blockquote>\n<p>使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dlYnRvcnJlbnQvbm9kZS1iZW5jb2Rl\">node-bencode<i class=\"fa fa-external-link-alt\"></i></span>库</p>\n</blockquote>\n<p>使用bencode编码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> bencode <span class=\"keyword\">from</span> <span class=\"string\">&#x27;bencode&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  <span class=\"attr\">string</span>: <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">integer</span>: <span class=\"number\">12345</span>,</span><br><span class=\"line\">  <span class=\"attr\">dict</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>: <span class=\"string\">&#x27;This is a string within a dictionary&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">list</span>: [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"string\">&#x27;string&#x27;</span>, <span class=\"number\">5</span>, &#123;&#125; ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = bencode.<span class=\"title function_\">encode</span>(data)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(result).<span class=\"title function_\">toString</span>())</span><br><span class=\"line\"><span class=\"comment\">// d4:dictd3:key36:This is a string within a dictionarye7:integeri12345e4:listli1ei2ei3ei4e6:stringi5edee6:string11:Hello Worlde</span></span><br></pre></td></tr></table></figure>\n\n<p>使用bencode解码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> bencode <span class=\"keyword\">from</span> <span class=\"string\">&#x27;bencode&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"string\">&#x27;d4:dictd3:key36:This is a string within a dictionarye7:integeri12345e4:listli1ei2ei3ei4e6:stringi5edee6:string11:Hello Worlde&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = bencode.<span class=\"title function_\">decode</span>(<span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(data))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> resultUtf8 = bencode.<span class=\"title function_\">decode</span>(<span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(data), <span class=\"string\">&#x27;utf8&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(resultUtf8)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   dict: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     key: Uint8Array(36) [ 84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103, 32, 119, 105, 116, 104, 105, 110, 32, 97, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121 ],</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   integer: 12345,</span></span><br><span class=\"line\"><span class=\"comment\">//   list: [ 1, 2, 3, 4, Uint8Array(6) [ 115, 116, 114, 105, 110, 103 ], 5, &#123;&#125; ],</span></span><br><span class=\"line\"><span class=\"comment\">//   string: Uint8Array(11) [ 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100 ],</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   dict: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     key: &quot;This is a string within a dictionary&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   integer: 12345,</span></span><br><span class=\"line\"><span class=\"comment\">//   list: [ 1, 2, 3, 4, &quot;string&quot;, 5, &#123;&#125; ],</span></span><br><span class=\"line\"><span class=\"comment\">//   string: &quot;Hello World&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分析编码内容\"><a href=\"#分析编码内容\" class=\"headerlink\" title=\"分析编码内容\"></a>分析编码内容</h3><p>让我们来看看编码出来的内容</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">d4:dictd3:key36:This is a string within a dictionarye7:integeri12345e4:listli1ei2ei3ei4e6:stringi5edee6:string11:Hello Worlde</span><br></pre></td></tr></table></figure>\n\n<p>Bencode编码算法中</p>\n<ul>\n<li>integers整数类型 编码为<code>i&lt;base10 integer&gt;e</code><ul>\n<li>上面<code>i12345e</code> 对应了 <code>integer: 12345</code>中的12345<ul>\n<li>格式化下: <code>i 12345 e</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>byte strings字节串类型 编码为<code>&lt;length&gt;:&lt;contents&gt;</code><ul>\n<li>上面<code>7:integer</code> 对应了 <code>integer: 12345</code>中的integer<ul>\n<li>格式化下: <code>7: integer</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>dictionaries字典类型 编码为 <code>d&lt;pairs&gt;e</code><ul>\n<li>上面<code>de</code>对应<code>&#123;&#125;</code></li>\n<li>上面 <code>d3:key36:This is a string within a dictionarye</code> 对应<code>&#123;key: &quot;This is a string within a dictionary&quot;&#125;</code><ul>\n<li>格式化下: <code>d 3:key 36:This is a string within a dictionary e</code>其中两个字符串类型 <code>3:key</code>和 <code>36:This is a string within a dictionary</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>lists列表类型 编码为<code>l&lt;elements&gt;e</code><ul>\n<li>上面<code>li1ei2ei3ei4e6:stringi5edee</code> 对应<code>[ 1, 2, 3, 4, &quot;string&quot;, 5, &#123;&#125; ]</code><ul>\n<li>格式化下: <code>l i1e i2e i3e i4e 6:string i5e de e</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"torrent文件内容\"><a href=\"#torrent文件内容\" class=\"headerlink\" title=\"torrent文件内容\"></a>torrent文件内容</h2><p>从上面可知 torrent文件需要使用bencode编码去解码才能解析出文件内容</p>\n<p>下面我们使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dlYnRvcnJlbnQvbm9kZS1iZW5jb2Rl\">node-bencode<i class=\"fa fa-external-link-alt\"></i></span>来解析一个torrent文件，来看看里面的具体内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> bencode <span class=\"keyword\">from</span> <span class=\"string\">&#x27;bencode&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./test.torrent&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = bencode.<span class=\"title function_\">decode</span>(data, <span class=\"string\">&#x27;utf8&#x27;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(result, <span class=\"literal\">null</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   &quot;announce-list&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">//     [</span></span><br><span class=\"line\"><span class=\"comment\">//       &quot;http://p4p.arenabg.com:1337/announce&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//     ],</span></span><br><span class=\"line\"><span class=\"comment\">//     [</span></span><br><span class=\"line\"><span class=\"comment\">//       &quot;udp://47.ip-51-68-199.eu:6969/announce&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//     ],</span></span><br><span class=\"line\"><span class=\"comment\">//     ...</span></span><br><span class=\"line\"><span class=\"comment\">//   ],</span></span><br><span class=\"line\"><span class=\"comment\">//   &quot;info&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     &quot;files&quot;: [</span></span><br><span class=\"line\"><span class=\"comment\">//       &#123; &quot;length&quot;: 601, &quot;path&quot;: [&quot;Code.txt&quot;] &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//       &#123; &quot;length&quot;: 50, &quot;path&quot;: [&quot;SeeHD.WS.txt&quot;] &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//       &#123; &quot;length&quot;: 38, &quot;path&quot;: [&quot;Torrent Downloaded From ProstyleX.com.txt&quot; ] &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//       &#123; &quot;length&quot;: 3135215904, &quot;path&quot;: [&quot;WwW.SeeHD.PL__Overlord 2018 1080p PROPER WEB-DL X264 5.1-SeeHD.mkv&quot;] &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//     ],</span></span><br><span class=\"line\"><span class=\"comment\">//     &quot;name&quot;: &quot;Overlord 2018 1080p PROPER WEB-DL X264 5.1-SeeHD&quot;,</span></span><br><span class=\"line\"><span class=\"comment\">//     &quot;piece length&quot;: 262144,</span></span><br><span class=\"line\"><span class=\"comment\">//     &quot;pieces&quot;: &lt;binary SHA1 hashes&gt; // &quot;xxx一些乱码&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面输出的结果中</p>\n<ul>\n<li>announce-list的内容 就是对应的文章开头说的 tracker信息</li>\n<li>info的内容 对应的就是 文件信息</li>\n</ul>\n<p>一般种子文件可能的字段和其含义:</p>\n<ul>\n<li>tracker信息<ul>\n<li>announce: 追踪服务器的URL</li>\n<li>announce-list: BitTorrent规范中的<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iaXR0b3JyZW50Lm9yZy9iZXBzL2JlcF8wMDEyLmh0bWw=\">BEP-0012<i class=\"fa fa-external-link-alt\"></i></span>扩展支持多个追踪器</li>\n</ul>\n</li>\n<li>文件信息<ul>\n<li><code>info.name</code>: 建议保存文件的目录名称</li>\n<li><code>info.files</code>: 种子中的文件， 每个元素代表一个目录名或文件名。</li>\n<li><code>info[&quot;piece length&quot;]</code>: 每个片段&#x2F;文件块的长度</li>\n<li><code>info.pieces</code>： 实际每个文件块的SHA-1 所集成的Hash<ul>\n<li>可以抽象的想象一些 <code>info.pieces</code>大概内容(ps: <code>Piece 1:</code>是不存在的):<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">Piece 1: a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8g9h0</span><br><span class=\"line\">Piece 2: f1e2d3c4b5a6f7e8d9c0b1a2f3e4d5c6b7a8c9d0</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li>\n<li>pieces 字段的作用是<strong>用于文件完整性校验</strong>，确保下载过程中传输的数据块没有被篡改或损坏</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"info-hash\"><a href=\"#info-hash\" class=\"headerlink\" title=\"info_hash\"></a>info_hash</h3><p>info_hash 是<strong>种子文件的唯一标识符</strong>，它是 <code>.torrent</code> 文件中 info 部分的哈希值</p>\n<p>从torrent获取info_hash, 对 info 部分进行 Bencode 编码后计算 SHA-1 哈希值，得到 info_hash。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\">info_hash = <span class=\"title function_\">sha1</span>(bencode.<span class=\"title function_\">encode</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">info</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">files</span>: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">length</span>: <span class=\"number\">615</span>,    <span class=\"attr\">path</span>: [<span class=\"string\">&quot;free audiobook verison.txt&quot;</span>] &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">length</span>: <span class=\"number\">393417</span>, <span class=\"attr\">path</span>: [<span class=\"string\">&quot;Warcraft_ Official Movie Novelization by Christie Golden.epub&quot;</span>] &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Warcraft_ Official Movie Novelization by Christie Golden EPUB&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;piece length&quot;</span>: <span class=\"number\">10485765</span>,</span><br><span class=\"line\">    <span class=\"attr\">pieces</span>: xxx</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Tracker服务器\"><a href=\"#Tracker服务器\" class=\"headerlink\" title=\"Tracker服务器\"></a>Tracker服务器</h2><p>Tracker服务器是<strong>帮助BitTorrent协议在 节点与节点之间 做连接</strong>的服务器(这里的节点指的用户与用户间)</p>\n<div class=\"markdown-alert markdown-alert-tip\">\n<p class=\"markdown-alert-title\"><svg class=\"octicon octicon-light-bulb mr-2\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z\"></path></svg>Tip</p>\n<p>P2P最终的文件资源还是存储在用户，不存在一个中心化的服务器去存储资源!!<br>资源下载发生在用户与用户之间</p>\n</div>\n<p><img src=\"/torrent-file/tracker-server.png\" alt=\"tracker-server\" loading=\"lazy\"></p>\n<p>Bt下载器(迅雷之类的软件)一开始就要连接到Tracker，从Tracker获得其他用户的客户端IP地址(Peers)后，才能连接到其他客户端下载。<br>在传输过程中，也会一直与Tracker通信，上传自己的信息，获取其它客户端的信息。</p>\n<p>举个栗子</p>\n<p>例如BT服务器将一个文件分成了N个部分，有甲、乙、丙、丁四位用户同时下载，那么BT并不会完全从服务器下载这个文件的所有部分，而是根据实际情况有选择地从其他用户的机器中下载已下载完成的部分。</p>\n<p>例如甲已经下载了第1部分，乙已经下载了第2部分，那么丙就会从甲的机器中下载第1部分，从乙的机器中下载第2部分，当然甲、乙、丁三位用户也在同时从丙的机器中下载相应的部分，这就大大减轻了BT服务器的负荷，也同时加快了丙的下载速度，也就是说每台参加下载的计算机既从其他用户的计算机上下载文件，同时自身也向其他用户提供下载，因此参与<strong>下载的用户数量越多，下载速度也越高</strong>。</p>\n<p>这里有个问题 用户与用户之间怎么知道对方有哪部分文件和对方的ip地址呢，这就是Tracker起到的作用</p>\n<!-- 在 P2P 下载中，数据从多个节点分块下载，可能会因为传输错误、恶意节点等原因导致数据损坏。\n\n下载完成后，客户端会对每个块重新计算 SHA-1 哈希值，并与`pieces` 字段中对应的哈希值进行比较：\n- 如果匹配，则数据块完整。\n- 如果不匹配，则丢弃损坏的数据块并重新下载。 -->\n\n<h2 id=\"DHT分布式哈希表\"><a href=\"#DHT分布式哈希表\" class=\"headerlink\" title=\"DHT分布式哈希表\"></a>DHT分布式哈希表</h2><p>如果Tracker服务不工作或者封禁了怎么办？</p>\n<p>DHT 网络（Distributed Hash Table分布式哈希表）是 BitTorrent 协议的一种去中心化技术，它允许在没有 Tracker 服务器的情况下，客户端通过 P2P 网络找到其他下载节点（Peers）</p>\n<blockquote>\n<p>DHT 可以与 .torrent 文件或 磁力链接(Magnet Link)一起工作，适应多种场景</p>\n</blockquote>\n<p>支持DHT的客户端(即迅雷，电驴这些客户端)可以在 Tracker不可用时通过 DHT网络查找 Peer(用户的节点)</p>\n<blockquote>\n<p>ps: 前提是需要客户端(即迅雷，电驴这些客户端)支持</p>\n</blockquote>\n<p>大概原理</p>\n<ul>\n<li>加入DHT网络(可能就是打开软件时)<ul>\n<li>客户端成为DHT网络中的一个节点</li>\n<li>每个 DHT 节点都维护一部分哈希表，用于存储种子信息（info_hash）和与之相关的 Peer 信息</li>\n</ul>\n</li>\n<li>存储和查询数据<ul>\n<li>存储：当客户端拥有一个种子（或下载一部分文件）时，它会将自己的地址（IP 和端口）与种子的 info_hash 绑定，并<strong>通过DHT协议广播到网络</strong>。</li>\n<li>查询：当客户端需要下载文件时，它会将种子的 info_hash 发送到 DHT 网络，寻找拥有该种子的 Peer 列表。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>所以当没有Tracker服务时，靠把info_hash 广播到DHT网络中 找到对应的 Peer节点(即别的用户的电脑) 去下载，代替了原本Tracker的功能</p>\n</blockquote>\n<h2 id=\"大概的下载流程\"><a href=\"#大概的下载流程\" class=\"headerlink\" title=\"大概的下载流程\"></a>大概的下载流程</h2><ol>\n<li>解析 .torrent 文件</li>\n<li>与tracker服务建立链接，发送请求以获取 Peers 列表(这个列表就是其他client的节点ip和端口)</li>\n<li>请求Peers, 下载 Piece(文件片段)，根据 pieces 字段校验 Piece 的有效性</li>\n<li>组装 Piece片段，得到完整的文件</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWNuLyVFNyVBNyU4RCVFNSVBRCU5MCVFNiU5NiU4NyVFNCVCQiVCNg==\">Torrent_file维基<i class=\"fa fa-external-link-alt\"></i></span>&#x2F;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVG9ycmVudF9maWxlI0V4YW1wbGVz\">Torrent_file维基(en版更详细)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQmVuY29kZQ==\">Bencode维基<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQml0VG9ycmVudF90cmFja2Vy\">Tracker维基<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg4JTg2JUU2JTk1JUEzJUU1JUJDJThGJUU5JTlCJTlDJUU2JUI5JThBJUU4JUExJUE4\">DHT分布式表<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dlYnRvcnJlbnQvbm9kZS1iZW5jb2Rl\">node-bencode库<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>⭐️<span class=\"exturl\" data-url=\"aHR0cHM6Ly9janRpbmcubWUvMjAyMC8xMC8zMS90aW55dG9ycmVudC1hLWRlbm8tYnQtZG93bmxvYWRlci8=\">tinyTorrent: 从头写一个 Deno 的 BitTorrent 下载器<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NzU3MjgzL2FydGljbGUvZGV0YWlscy85NDQ1MDk4MA==\">https://blog.csdn.net/qq_29757283/article/details/94450980<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>⭐️<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NTEzMzcxMjg=\">一文读懂Bt种子、磁力链接、直链、p2p这些下载的区别<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<!-- BitTorrent的P2P下载是怎么做到的？\n要做到P2P下载首先需要解决如下两个问题：\n\n1、 如何知道哪些Client在下载同一个文件？\n\n2、 对某一个文件，如何做到同时从多个来源进行下载？\n\n对于第一个问题的解决方案：\n\n设计一个TrackerServer（跟踪服务器），每一个Client需要去这里上报自己正在下载的文件以及自己的ip地址和监听的端口。新来的Client先要连接到TrackerServer，根据要下载的文件查询当前正在下载这个文件的Clients (Peers)。\n\n对于第二个问题的解决方法：\n\nClient从TrackerServer获取Peers后，分别向他们发起连接并询问当前的下载进度，然后，同时连接多个Peers分别下载他们已完成的文件片段，最后拼接出完整的文件。\n -->\n\n\n<!--\n1、那么我使用迅雷我也是一个peer,被迫给别的下载的peer传输资源？\n  - 这要看迅雷的实现，下载和上传的逻辑由客户端控制。比如 tinyTorrent 就只下载不上传。可以使用一些 BT 软件比如 uTorrent。\n2、如何把我本地一个资源做成种子呢？制作成功了，发给别人我电脑关机了或者资源删除了，意思就别人无法下载了吗？\n  - 如果只有你一个人做种，那么是的，你下线了自然就无法下载了。\n-->\n\n\n<!--\n要做到P2P下载首先需要解决如下两个问题：\n\n1、 如何知道哪些Client在下载同一个文件？\n2、 对某一个文件，如何做到同时从多个来源进行下载？\n对于第一个问题的解决方案：\n设计一个TrackerServer（跟踪服务器），每一个Client需要去这里上报自己正在下载的文件以及自己的ip地址和监听的端口。新来的Client先要连接到TrackerServer，根据要下载的文件查询当前正在下载这个文件的Clients (Peers)。\n对于第二个问题的解决方法：\nClient从TrackerServer获取Peers后，分别向他们发起连接并询问当前的下载进度，然后，同时连接多个Peers分别下载他们已完成的文件片段，最后拼接出完整的文件。\n-->\n","categories":["技术"],"tags":["科普","p2p"]},{"title":"网站地图(sitemap)","url":"/sitemap/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>站点地图（Sitemap）描述了网站的架构。 它可以是一个任意形式的文档(xml&#x2F;html)，是列出网站中所有页面的一个网页。</p>\n<p>有助于访问者以及搜索引擎的爬虫找到网站中的页面(对seo有利)。</p>\n<p>一般情况下，也就是 <code>https://domain.com/sitemap.xml</code></p>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><p>网站地图可以有多种格式 XML文件（sitemap.xml）、HTML文件(sitemap.html)、TXT文件(sitemap.txt)或RSS文件(rss.xml)，</p>\n<p>通常是分级的XML结构</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sitemapindex</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&#x27;http://www.sitemaps.org/schemas/sitemap/0.9&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span>https://www.youtube.com/ads/sitemap.xml<span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span>https://www.youtube.com/sitemaps/misc.xml<span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span>https://www.youtube.com/kids/sitemap.xml<span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">loc</span>&gt;</span>https://www.youtube.com/trends/sitemap.xml<span class=\"tag\">&lt;/<span class=\"name\">loc</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">sitemap</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">sitemapindex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如上面 从首页的<code>sitemap.xml</code>指向了子模块中的多个<code>sitemap.xml</code></p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><ul>\n<li>b站的sitemap: <code>https://www.bilibili.com/sitemap.xml</code></li>\n<li>github的sitemap(以html的格式): <code>https://github.com/sitemap</code></li>\n<li>youtube的sitemap: <code>https://www.youtube.com/sitemaps/sitemap.xml</code></li>\n<li>hexo的sitemap: <code>https://hexo.io/sitemap.xml</code><ul>\n<li>hexo生成sitemap的插件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWdlbmVyYXRvci1zaXRlbWFw\">hexo-generator-sitemap<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n</ul>\n","categories":["技术"],"tags":["科普","seo"]},{"title":"汉明码 Hamming Code","url":"/hamming-code/","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>数据传输的过程中，数据丢失或者人为干扰时就可能会出现<code>数据接收者</code>接收到的数据出现差错</p>\n<p>为了保证的数据的完整性或错误纠正有几种解决方案:</p>\n<ul>\n<li>错误检测方案: 奇偶校验(只能检测奇数位错误)、校验和(checksum)、循环冗余校验(CRC)、哈希...</li>\n<li>错误检测+纠错的方案: 汉明码(单bit错误检测和纠正)、BCH码(多bit错误检测和纠正)...</li>\n</ul>\n<p>汉明码是一种用于检测和纠正<strong>单比特</strong>错误的编码技术</p>\n<h2 id=\"编码步骤\"><a href=\"#编码步骤\" class=\"headerlink\" title=\"编码步骤\"></a>编码步骤</h2><ol>\n<li><p>先计算出 汉明码的长度</p>\n<p> 公式为 $2^k &gt;&#x3D; N + k + 1$其中 N为数据长度， k为 汉明码的长度</p>\n</li>\n<li><p>根据长度填入原数据，冗余位留空</p>\n<p> 冗余位即汉明码要填入2的幂次位置，所以 1($2^0$)、2($2^1$)、4($2^2$)、8($2^3$)...格要留空</p>\n</li>\n<li><p>计算冗余位的值  <!-- 求汉明码 --></p>\n<ol>\n<li>根据<strong>原数据中bit为1的每一位所在的索引位置</strong>(从左往右从1开始), 计算出对应的二进制值</li>\n<li>根据二进制值做XOR(异或)运算得出 冗余位该填入的值, 得到的二进制数<strong>从右往左</strong>填充入冗余位</li>\n</ol>\n</li>\n<li><p>冗余位与数据原值合并得到最后编码结果</p>\n</li>\n</ol>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>计算原数据<code>10101111</code>的汉明码</p>\n<ol>\n<li><p>计算汉明码的长度 $2^k &gt;&#x3D; 8 + k + 1$ 得到k&#x3D;4 满足条件(其中8为<code>10101111</code>的长度)</p>\n<p> 所以有4个冗余位, 汉明码的长度 <code>4 + 8 = 12</code></p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>&nbsp;</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>接着再将原数据的值填入表格</p>\n<p> <strong>重点</strong>: 汉明码要填在2的幂次的位置, 所以 1($2^0$)、2($2^1$)、4($2^2$)、8($2^3$)格要留空</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td>1</td>\n<td></td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td></td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>计算出冗余位的值</p>\n<ol>\n<li>根据原值索引转化出对应二进制</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td>1</td>\n<td></td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td></td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>3 &#x3D;&gt; 0011</td>\n<td></td>\n<td></td>\n<td>6 &#x3D;&gt;0110</td>\n<td></td>\n<td></td>\n<td>9 &#x3D;&gt; 1001</td>\n<td>10 &#x3D;&gt; 1010</td>\n<td>11 &#x3D;&gt;  1011</td>\n<td>12 &#x3D;&gt; 1100</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li>根据得到的二进制数执行XOR异或运算<br> <code>0b0011 ^ 0b0110 ^ 0b1001 ^ 0b1010 ^ 0b1011 ^ 0b1100 = 0b0001</code></li>\n</ol>\n <figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">   | 8 4 2 1</span><br><span class=\"line\">---|----------</span><br><span class=\"line\">3  | 0 0 1 1</span><br><span class=\"line\">6  | 0 1 1 0</span><br><span class=\"line\">9  | 1 0 0 1</span><br><span class=\"line\">10 | 1 0 1 0</span><br><span class=\"line\">11 | 1 0 1 1</span><br><span class=\"line\">12 | 1 1 0 0</span><br><span class=\"line\">---|----------</span><br><span class=\"line\">XOR| 0 0 0 1</span><br><span class=\"line\"></span><br><span class=\"line\">对应 得出 索引1填入1, 索引2填入0, 索引4填入0 索引8填入0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>填入冗余位与数据原值组合得出最终的编码 <code>101001001111</code></p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<h2 id=\"纠错\"><a href=\"#纠错\" class=\"headerlink\" title=\"纠错\"></a>纠错</h2><p>数据接收者拿到汉明码后 可以通过汉明码中 bit为1的位根据对应的索引转换成二进制，并进行XOR</p>\n<ul>\n<li>如果 结果为 0 则代表 没错误无需纠正</li>\n<li>如果 结果非0 则得到的结果为 错误的位的索引号</li>\n</ul>\n<p>还是之前的例子 原数据<code>10101111</code> 得出的汉明码 <code>101001001111</code></p>\n<p>验证<code>101001001111</code></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">   |</span><br><span class=\"line\">---|----------</span><br><span class=\"line\">1  | 0 0 0 1</span><br><span class=\"line\">3  | 0 0 1 1</span><br><span class=\"line\">6  | 0 1 1 0</span><br><span class=\"line\">9  | 1 0 0 1</span><br><span class=\"line\">10 | 1 0 1 0</span><br><span class=\"line\">11 | 1 0 1 1</span><br><span class=\"line\">12 | 1 1 0 0</span><br><span class=\"line\">---|----------</span><br><span class=\"line\">XOR| 0 0 0 0</span><br></pre></td></tr></table></figure>\n\n<p>结果为<code>0000</code>表示该汉明码正确</p>\n<p>修改汉明码中的一位改为<code>101001001110</code> 如何得到修改了哪一位并修正?</p>\n<ol>\n<li>取出汉明码中的为1的位并根据所在的索引转为二进制</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">   |</span><br><span class=\"line\">---|----------</span><br><span class=\"line\">1  | 0 0 0 1</span><br><span class=\"line\">3  | 0 0 1 1</span><br><span class=\"line\">6  | 0 1 1 0</span><br><span class=\"line\">9  | 1 0 0 1</span><br><span class=\"line\">10 | 1 0 1 0</span><br><span class=\"line\">11 | 1 0 1 1</span><br><span class=\"line\">---|----------</span><br><span class=\"line\">XOR| 1 1 0 0</span><br></pre></td></tr></table></figure>\n\n<p>得到了 <code>0b1100</code> 即 十进制的<code>12</code> 表示第12位错误 即<code>101001001110</code>有错误 第12位 0应改为1<br><code>101001001111</code></p>\n<h3 id=\"多个bit错误\"><a href=\"#多个bit错误\" class=\"headerlink\" title=\"多个bit错误\"></a>多个bit错误</h3><p>汉明码只能检测和纠正单个bit的错误</p>\n<p>例如 原数据<code>10101111</code> 得出的汉明码 <code>101001001111</code>，<br>此时 把汉明码 第12位改为0 第11位改为0 为<code>101001001100</code></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"code\"><pre><span class=\"line\">   |</span><br><span class=\"line\">---|----------</span><br><span class=\"line\">1  | 0 0 0 1</span><br><span class=\"line\">3  | 0 0 1 1</span><br><span class=\"line\">6  | 0 1 1 0</span><br><span class=\"line\">9  | 1 0 0 1</span><br><span class=\"line\">10 | 1 0 1 0</span><br><span class=\"line\">---|----------</span><br><span class=\"line\">XOR| 0 1 1 1</span><br></pre></td></tr></table></figure>\n\n<p>修改两位比特位导致校验冲突，结果<code>111</code>即7，而第7位并没有被修改过</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly95YW9qb3JkYW4ubWVkaXVtLmNvbS8lRTglQTglODglRTYlQTYlODItaGFtbWluZy1jb2RlLSVFNiVCQyVBMiVFNiU5OCU4RSVFNyVBMiVCQy03ODEwMmQ2ODBjNzg=\">https://yaojordan.medium.com/%E8%A8%88%E6%A6%82-hamming-code-%E6%BC%A2%E6%98%8E%E7%A2%BC-78102d680c78<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JUIxJTg5JUU2JTk4JThFJUU3JUEwJTgx\">https://zh.wikipedia.org/wiki/%E6%B1%89%E6%98%8E%E7%A0%81<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["技术"],"tags":["科普","数据错误检测/纠错","编码"]},{"title":"分类","url":"/categories/index.html","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">"},{"title":"Page Not Found","url":"//404.html","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><div style=\"display:flex; flex-direction: column; justify-content: center; align-items: center; min-height: 60vh\">\n  <img src=\"/images/404.svg\" style=\"max-width: 300px\">\n</div>\n"},{"title":"标签","url":"/tags/index.html","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">"}]